(()=>{"use strict";var __webpack_modules__={56:(module,__unused_webpack_exports,__webpack_require__)=>{eval('{\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzP2RkY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///56\n\n}')},72:module=>{eval('{\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzPzJkYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///72\n\n}')},113:module=>{eval("{\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzPzFkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///113\n\n}")},237:(c,n,l)=>{c.exports=l.p+"97ed8e7eef60d61ca469.svg"},314:module=>{eval('{\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///314\n\n}')},354:module=>{eval('{\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzP2FmMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///354\n\n}')},365:(module,__webpack_exports__,__webpack_require__)=>{eval('{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(417);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(468), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(795), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(237), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@font-face {\r\n  font-family: military;\r\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format("truetype");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n\r\n@font-face {\r\n  font-family: coolvetica;\r\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_1___}) format("opentype");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n\r\n:root {\r\n  --primary-color: rgb(78, 78, 78);\r\n  --secondary-color: white;\r\n\r\n  --primary-font-color: white;\r\n  --header-font: military;\r\n\r\n  --font-size-base: 16px;\r\n\r\n  --font-size-xs: 0.75rem; /* 12px */\r\n  --font-size-sm: 0.875rem; /* 14px */\r\n  --font-size-md: 1rem; /* 16px (base) */\r\n  --font-size-lg: 1.125rem; /* 18px */\r\n  --font-size-xl: 1.25rem; /* 20px */\r\n  --font-size-2xl: 1.5rem; /* 24px */\r\n  --font-size-3xl: 1.875rem; /* 30px */\r\n  --font-size-4xl: 2.25rem; /* 36px */\r\n  --font-size-5xl: 3rem; /* 48px */\r\n  --font-size-6xl: 4rem; /* 64px */\r\n}\r\n\r\n/* Base styles */\r\n\r\nhtml {\r\n  font-family: coolvetica;\r\n}\r\n\r\nbody {\r\n  height: 100vh;\r\n  background-color: var(--primary-color);\r\n  color: var(--primary-font-color);\r\n  overflow: hidden; /*Prevents scroll*/\r\n}\r\n\r\nbutton {\r\n  height: 100px;\r\n  width: 100px;\r\n}\r\n\r\nh1 {\r\n  font-size: calc(var(--font-size-6xl) * 1.3);\r\n  font-family: var(--header-font);\r\n  text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.9), 6px 6px 10px rgba(0, 0, 0, 0.8),\r\n    0 0 20px rgba(0, 0, 0, 0.5);\r\n  user-select: none;\r\n}\r\n\r\nh2 {\r\n  font-size: var(--font-size-5xl);\r\n  text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.9), 6px 6px 10px rgba(0, 0, 0, 0.8),\r\n    0 0 20px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n/* Layout styles */\r\n\r\nbody {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\nmain {\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n#placeShipPopup {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: fixed;\r\n  top: 53%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%); /* center the popup */\r\n  background: var(--primary-color);\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  z-index: 1001; /* higher than overlay */\r\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\r\n  max-width: 90%;\r\n  max-height: 90%;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n}\r\n\r\n#placeShipPopup h2 {\r\n  margin: 0;\r\n}\r\n\r\n#shipSelection {\r\n  margin: 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 1px var(--secondary-color) solid;\r\n  height: 40px;\r\n  width: 100%;\r\n}\r\n\r\n.grid-small {\r\n  height: 384px; /* 60% of 640 */\r\n  width: 384px; /* 60% of 640 */\r\n  border: 5px var(--secondary-color) solid;\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.7);\r\n\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n}\r\n\r\n.grid {\r\n  height: 640px;\r\n  width: 640px;\r\n  border: 5px var(--secondary-color) solid;\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.7);\r\n\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n}\r\n\r\n.grid-cell {\r\n  border: 1px solid var(--secondary-color);\r\n  width: 100%;\r\n  height: 100%;\r\n  cursor: pointer;\r\n  box-sizing: border-box; /* Stops cells overflowing */\r\n}\r\n\r\nfooter {\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 5px;\r\n  color: var(--primary-font-colorcolor);\r\n  font-family: var(--header-font);\r\n  text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.9), 6px 6px 10px rgba(0, 0, 0, 0.8),\r\n    0 0 20px rgba(0, 0, 0, 0.5);\r\n  user-select: none;\r\n}\r\n\r\n.github-mark {\r\n  height: 20px;\r\n  width: 20px;\r\n  place-self: center;\r\n  background: none;\r\n  border: none;\r\n  padding: 0;\r\n  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_2___});\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  border-radius: 15px;\r\n  box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.9);\r\n}\r\n\r\n/* Component styles */\r\n\r\n#winnerPopup {\r\n  /* Layout */\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n\r\n  /* Size */\r\n  width: 300px;\r\n  height: 300px;\r\n  max-width: 90%;\r\n  max-height: 90%;\r\n  padding: 20px;\r\n\r\n  /* Positioning */\r\n  position: fixed;\r\n  top: 53%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 1001;\r\n\r\n  /* Appearance */\r\n  background: var(--primary-color);\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\r\n\r\n  /* Overflow */\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n}\r\n\r\n.blurOverlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  backdrop-filter: blur(5px);\r\n  background-color: rgba(0, 0, 0, 0.6); /* dim background */\r\n  z-index: 1000; /* below the popup */\r\n}\r\n\r\n/* State styles */\r\n\r\n.hover-effect {\r\n  transform: scale(1.05);\r\n  background-color: aquamarine;\r\n}\r\n\r\n.placed {\r\n  transform: scale(1.05);\r\n  background-color: #ffffff;\r\n  box-shadow: 0 0 10px 3px rgba(12, 12, 12, 0.7); /* soft dark glow */\r\n  border-radius: 4px;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease,\r\n    background-color 0.3s ease;\r\n  cursor: default;\r\n}\r\n.placed:hover {\r\n  transform: scale(1.1);\r\n  box-shadow: 0 0 15px 5px rgba(255, 255, 255, 0.9);\r\n  background-color: #f0f8ff;\r\n}\r\n\r\n.hit {\r\n  transform: scale(1.05);\r\n  background-color: #e06666; /* soft aquamarine/red mix */\r\n  box-shadow: 0 0 10px 3px rgba(12, 12, 12, 0.7); /* soft dark glow */\r\n  border-radius: 4px;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease,\r\n    background-color 0.3s ease;\r\n  cursor: default;\r\n}\r\n.hit:hover {\r\n  transform: scale(1.1);\r\n  box-shadow: 0 0 15px 5px rgba(255, 0, 0, 0.9); /* red glow */\r\n  background-color: #e06666;\r\n}\r\n\r\n.miss {\r\n  background-color: #888888; /* grey */\r\n  box-shadow: 0 0 8px 2px rgba(50, 50, 50, 0.6);\r\n  border-radius: 4px;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease,\r\n    background-color 0.3s ease;\r\n  cursor: default;\r\n}\r\n.miss:hover {\r\n  transform: scale(1.05);\r\n  box-shadow: 0 0 12px 4px rgba(100, 100, 100, 0.8);\r\n  background-color: #bbbbbb;\r\n}\r\n\r\n/* Utility classes */\r\n\r\n/* Media queries */\r\n`, "",{"version":3,"sources":["webpack://./src/styles.css"],"names":[],"mappings":"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","sourcesContent":["@font-face {\\r\\n  font-family: military;\\r\\n  src: url(\\"fonts/MilitaryKid.ttf\\") format(\\"truetype\\");\\r\\n  font-weight: normal;\\r\\n  font-style: normal;\\r\\n}\\r\\n\\r\\n@font-face {\\r\\n  font-family: coolvetica;\\r\\n  src: url(\\"fonts/Coolvetica.otf\\") format(\\"opentype\\");\\r\\n  font-weight: normal;\\r\\n  font-style: normal;\\r\\n}\\r\\n\\r\\n:root {\\r\\n  --primary-color: rgb(78, 78, 78);\\r\\n  --secondary-color: white;\\r\\n\\r\\n  --primary-font-color: white;\\r\\n  --header-font: military;\\r\\n\\r\\n  --font-size-base: 16px;\\r\\n\\r\\n  --font-size-xs: 0.75rem; /* 12px */\\r\\n  --font-size-sm: 0.875rem; /* 14px */\\r\\n  --font-size-md: 1rem; /* 16px (base) */\\r\\n  --font-size-lg: 1.125rem; /* 18px */\\r\\n  --font-size-xl: 1.25rem; /* 20px */\\r\\n  --font-size-2xl: 1.5rem; /* 24px */\\r\\n  --font-size-3xl: 1.875rem; /* 30px */\\r\\n  --font-size-4xl: 2.25rem; /* 36px */\\r\\n  --font-size-5xl: 3rem; /* 48px */\\r\\n  --font-size-6xl: 4rem; /* 64px */\\r\\n}\\r\\n\\r\\n/* Base styles */\\r\\n\\r\\nhtml {\\r\\n  font-family: coolvetica;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  height: 100vh;\\r\\n  background-color: var(--primary-color);\\r\\n  color: var(--primary-font-color);\\r\\n  overflow: hidden; /*Prevents scroll*/\\r\\n}\\r\\n\\r\\nbutton {\\r\\n  height: 100px;\\r\\n  width: 100px;\\r\\n}\\r\\n\\r\\nh1 {\\r\\n  font-size: calc(var(--font-size-6xl) * 1.3);\\r\\n  font-family: var(--header-font);\\r\\n  text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.9), 6px 6px 10px rgba(0, 0, 0, 0.8),\\r\\n    0 0 20px rgba(0, 0, 0, 0.5);\\r\\n  user-select: none;\\r\\n}\\r\\n\\r\\nh2 {\\r\\n  font-size: var(--font-size-5xl);\\r\\n  text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.9), 6px 6px 10px rgba(0, 0, 0, 0.8),\\r\\n    0 0 20px rgba(0, 0, 0, 0.5);\\r\\n}\\r\\n\\r\\n/* Layout styles */\\r\\n\\r\\nbody {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\nmain {\\r\\n  display: flex;\\r\\n  gap: 15px;\\r\\n}\\r\\n\\r\\n#placeShipPopup {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  position: fixed;\\r\\n  top: 53%;\\r\\n  left: 50%;\\r\\n  transform: translate(-50%, -50%); /* center the popup */\\r\\n  background: var(--primary-color);\\r\\n  padding: 20px;\\r\\n  border-radius: 8px;\\r\\n  z-index: 1001; /* higher than overlay */\\r\\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\\r\\n  max-width: 90%;\\r\\n  max-height: 90%;\\r\\n  overflow-x: hidden;\\r\\n  overflow-y: auto;\\r\\n}\\r\\n\\r\\n#placeShipPopup h2 {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\n#shipSelection {\\r\\n  margin: 5px;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  border: 1px var(--secondary-color) solid;\\r\\n  height: 40px;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.grid-small {\\r\\n  height: 384px; /* 60% of 640 */\\r\\n  width: 384px; /* 60% of 640 */\\r\\n  border: 5px var(--secondary-color) solid;\\r\\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.7);\\r\\n\\r\\n  display: grid;\\r\\n  grid-template-columns: repeat(10, 1fr);\\r\\n  grid-template-rows: repeat(10, 1fr);\\r\\n}\\r\\n\\r\\n.grid {\\r\\n  height: 640px;\\r\\n  width: 640px;\\r\\n  border: 5px var(--secondary-color) solid;\\r\\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.7);\\r\\n\\r\\n  display: grid;\\r\\n  grid-template-columns: repeat(10, 1fr);\\r\\n  grid-template-rows: repeat(10, 1fr);\\r\\n}\\r\\n\\r\\n.grid-cell {\\r\\n  border: 1px solid var(--secondary-color);\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  cursor: pointer;\\r\\n  box-sizing: border-box; /* Stops cells overflowing */\\r\\n}\\r\\n\\r\\nfooter {\\r\\n  height: 100%;\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  gap: 5px;\\r\\n  color: var(--primary-font-colorcolor);\\r\\n  font-family: var(--header-font);\\r\\n  text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.9), 6px 6px 10px rgba(0, 0, 0, 0.8),\\r\\n    0 0 20px rgba(0, 0, 0, 0.5);\\r\\n  user-select: none;\\r\\n}\\r\\n\\r\\n.github-mark {\\r\\n  height: 20px;\\r\\n  width: 20px;\\r\\n  place-self: center;\\r\\n  background: none;\\r\\n  border: none;\\r\\n  padding: 0;\\r\\n  background-image: url(img/github-mark.svg);\\r\\n  background-size: contain;\\r\\n  background-repeat: no-repeat;\\r\\n  border-radius: 15px;\\r\\n  box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.9);\\r\\n}\\r\\n\\r\\n/* Component styles */\\r\\n\\r\\n#winnerPopup {\\r\\n  /* Layout */\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  text-align: center;\\r\\n\\r\\n  /* Size */\\r\\n  width: 300px;\\r\\n  height: 300px;\\r\\n  max-width: 90%;\\r\\n  max-height: 90%;\\r\\n  padding: 20px;\\r\\n\\r\\n  /* Positioning */\\r\\n  position: fixed;\\r\\n  top: 53%;\\r\\n  left: 50%;\\r\\n  transform: translate(-50%, -50%);\\r\\n  z-index: 1001;\\r\\n\\r\\n  /* Appearance */\\r\\n  background: var(--primary-color);\\r\\n  border-radius: 8px;\\r\\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\\r\\n\\r\\n  /* Overflow */\\r\\n  overflow-x: hidden;\\r\\n  overflow-y: auto;\\r\\n}\\r\\n\\r\\n.blurOverlay {\\r\\n  position: fixed;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  width: 100vw;\\r\\n  height: 100vh;\\r\\n  backdrop-filter: blur(5px);\\r\\n  background-color: rgba(0, 0, 0, 0.6); /* dim background */\\r\\n  z-index: 1000; /* below the popup */\\r\\n}\\r\\n\\r\\n/* State styles */\\r\\n\\r\\n.hover-effect {\\r\\n  transform: scale(1.05);\\r\\n  background-color: aquamarine;\\r\\n}\\r\\n\\r\\n.placed {\\r\\n  transform: scale(1.05);\\r\\n  background-color: #ffffff;\\r\\n  box-shadow: 0 0 10px 3px rgba(12, 12, 12, 0.7); /* soft dark glow */\\r\\n  border-radius: 4px;\\r\\n  transition: transform 0.3s ease, box-shadow 0.3s ease,\\r\\n    background-color 0.3s ease;\\r\\n  cursor: default;\\r\\n}\\r\\n.placed:hover {\\r\\n  transform: scale(1.1);\\r\\n  box-shadow: 0 0 15px 5px rgba(255, 255, 255, 0.9);\\r\\n  background-color: #f0f8ff;\\r\\n}\\r\\n\\r\\n.hit {\\r\\n  transform: scale(1.05);\\r\\n  background-color: #e06666; /* soft aquamarine/red mix */\\r\\n  box-shadow: 0 0 10px 3px rgba(12, 12, 12, 0.7); /* soft dark glow */\\r\\n  border-radius: 4px;\\r\\n  transition: transform 0.3s ease, box-shadow 0.3s ease,\\r\\n    background-color 0.3s ease;\\r\\n  cursor: default;\\r\\n}\\r\\n.hit:hover {\\r\\n  transform: scale(1.1);\\r\\n  box-shadow: 0 0 15px 5px rgba(255, 0, 0, 0.9); /* red glow */\\r\\n  background-color: #e06666;\\r\\n}\\r\\n\\r\\n.miss {\\r\\n  background-color: #888888; /* grey */\\r\\n  box-shadow: 0 0 8px 2px rgba(50, 50, 50, 0.6);\\r\\n  border-radius: 4px;\\r\\n  transition: transform 0.3s ease, box-shadow 0.3s ease,\\r\\n    background-color 0.3s ease;\\r\\n  cursor: default;\\r\\n}\\r\\n.miss:hover {\\r\\n  transform: scale(1.05);\\r\\n  box-shadow: 0 0 12px 4px rgba(100, 100, 100, 0.8);\\r\\n  background-color: #bbbbbb;\\r\\n}\\r\\n\\r\\n/* Utility classes */\\r\\n\\r\\n/* Media queries */\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///365\n\n}')},417:module=>{eval('{\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/["\'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, "\\\\n"), "\\"");\n  }\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcz8xZGU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///417\n\n}')},468:(c,n,l)=>{c.exports=l.p+"38871f5d8b45984258bd.ttf"},540:module=>{eval('{\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzP2RlNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///540\n\n}')},659:module=>{eval('{\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzP2IyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///659\n\n}')},795:(c,n,l)=>{c.exports=l.p+"9975df918fd92e4d242a.otf"},825:module=>{eval('{\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzP2U0NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///825\n\n}')},897:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('{\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/styles.css\nvar styles = __webpack_require__(365);\n;// ./src/styles.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, "head");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(styles/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const src_styles = (styles/* default */.A && styles/* default */.A.locals ? styles/* default */.A.locals : undefined);\n\n;// ./src/classes/Ship.js\n/**\r\n * Represents a ship in the Battleship game.\r\n *\r\n * Each ship has a name, a length (based on the type), and tracks\r\n * how many times it has been hit. The class provides methods to\r\n * register hits, check if the ship is sunk, and clone the ship instance.\r\n *\r\n * Static properties define valid ship names and their respective lengths.\r\n */\r\nclass Ship {\r\n  static VALID_NAMES = [\r\n    "carrier",\r\n    "battleship",\r\n    "cruiser",\r\n    "submarine",\r\n    "destroyer",\r\n  ];\r\n\r\n  static VALID_LENGTHS = {\r\n    carrier: 5,\r\n    battleship: 4,\r\n    cruiser: 3,\r\n    submarine: 3,\r\n    destroyer: 2,\r\n  };\r\n\r\n  #timesHit = 0;\r\n\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n\r\n  get name() {\r\n    return this._name;\r\n  }\r\n\r\n  set name(value) {\r\n    const lowerCaseValue = value.toLowerCase();\r\n\r\n    if (!Ship.VALID_NAMES.includes(lowerCaseValue)) {\r\n      throw new Error("Error the ship name is invalid.");\r\n    }\r\n\r\n    this._name = lowerCaseValue;\r\n    this._length = Ship.VALID_LENGTHS[lowerCaseValue];\r\n  }\r\n\r\n  get length() {\r\n    return this._length;\r\n  }\r\n\r\n  get timesHit() {\r\n    return this.#timesHit;\r\n  }\r\n\r\n  hit() {\r\n    this.#timesHit++;\r\n  }\r\n\r\n  isSunk() {\r\n    if (this.timesHit >= this.length) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone method.\r\n   *\r\n   * Returns a deeply equal clone maintaining class instance.\r\n   *\r\n   * This method is called by Gameboard.getShips to return copies of ships,\r\n   * ensuring callers cannot mutate the original ships.\r\n   *\r\n   * @return {Ship} - A new Ship instance cloned from this one.\r\n   */\r\n  clone() {\r\n    const shipClone = new Ship(this.name);\r\n    shipClone.#timesHit = this.timesHit;\r\n\r\n    return shipClone;\r\n  }\r\n}\r\n\n;// ./src/classes/Gameboard.js\n\r\n\r\n/**\r\n * Represents the Battleship gameboard.\r\n *\r\n * Manages a 10x10 grid where ships are placed and attacks are recorded.\r\n * Provides functionality to:\r\n * - Initialize and reset the gameboard.\r\n * - Place ships with validation to avoid overlaps and out-of-bound placements.\r\n * - Receive attacks and track hits or misses.\r\n * - Report overall ship status (sunk or afloat).\r\n * - Expose safe, deep-cloned views of the board state to prevent external mutation.\r\n *\r\n * Encapsulates private data including ship positions, attack records, and ship instances.\r\n */\r\nclass Gameboard {\r\n  static BOARD_ROWS = 10;\r\n  static BOARD_COLS = 10;\r\n\r\n  #grid;\r\n  #missedAttacks;\r\n  #landedAttacks;\r\n  #ships;\r\n\r\n  constructor() {\r\n    this.#grid = this.initGameboard();\r\n    this.#missedAttacks = {};\r\n    this.#landedAttacks = {};\r\n    this.#ships = {};\r\n  }\r\n\r\n  initGameboard() {\r\n    const grid = Array(Gameboard.BOARD_ROWS)\r\n      .fill(null)\r\n      .map(() => {\r\n        return Array(Gameboard.BOARD_COLS).fill(null);\r\n      });\r\n\r\n    return grid;\r\n  }\r\n\r\n  /**\r\n   * ResetBoard Method.\r\n   *\r\n   * Resets all gameboard properties to default values.\r\n   */\r\n  resetBoard() {\r\n    this.#grid = this.initGameboard();\r\n    this.#missedAttacks = {};\r\n    this.#landedAttacks = {};\r\n    this.#ships = {};\r\n  }\r\n\r\n  /**\r\n   * IsValidCoordinate method.\r\n   *\r\n   * Checks whether a coordinate exists within the grid.\r\n   */\r\n  isValidCoordinate(row, column) {\r\n    return (\r\n      typeof row === "number" &&\r\n      typeof column === "number" &&\r\n      row >= 0 &&\r\n      column >= 0 &&\r\n      column < Gameboard.BOARD_COLS &&\r\n      row < Gameboard.BOARD_ROWS\r\n    );\r\n  }\r\n  //\r\n\r\n  /**\r\n   * PlaceShip method.\r\n   *\r\n   * Places a ship on the board property within the gameboard instance and\r\n   *  adds them to the ships dictionary.\r\n   *\r\n   * @param {number} column - Starting column (x-coordinate)\r\n   * @param {number} row - Starting row (y-coordinate)\r\n   * @param {number} length - Length of the ship\r\n   * @param {string} shipName - Name of the ship\r\n   * @param {string} direction - Horizontal or vertical placement\r\n   * @return {bool} - True on success, else false.\r\n   */\r\n\r\n  placeShip(row, column, shipName, direction = "horizontal") {\r\n    const length = Ship.VALID_LENGTHS[shipName];\r\n\r\n    const isValid = this.verifyShipPlacement(\r\n      row,\r\n      column,\r\n      shipName,\r\n      direction,\r\n      length\r\n    );\r\n\r\n    if (!isValid) {\r\n      return false;\r\n    }\r\n\r\n    let ship = new Ship(shipName);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (direction.toLowerCase() == "horizontal") {\r\n        this.#grid[row][column + i] = ship;\r\n      } else if (direction.toLowerCase() == "vertical") {\r\n        this.#grid[row + i][column] = ship;\r\n      }\r\n    }\r\n\r\n    this.#ships[shipName] = ship;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * VerifyShipPlacement Helper Method.\r\n   *\r\n   * Verifies a ship can be placed on the gameboard correctly.\r\n   *\r\n   * @param {number} row - Starting row (y-coordinate)\r\n   * @param {number} column - Starting column (x-coordinate)\r\n   * @param {number} length - Length of the ship\r\n   * @param {string} shipName - Name of the ship\r\n   * @param {string} direction - Horizontal or vertical placement\r\n   * @param {string} length - Length of ship\r\n   * @return {bool} - True on success, else false\r\n   */\r\n  verifyShipPlacement(row, column, shipName, direction, length) {\r\n    const dir = direction.toLowerCase();\r\n    const horizontalSpaceLeft = Gameboard.BOARD_COLS - column;\r\n    const verticalSpaceLeft = Gameboard.BOARD_ROWS - row;\r\n\r\n    if (length !== Ship.VALID_LENGTHS[shipName]) {\r\n      throw new Error("Error ship length does not match");\r\n    }\r\n\r\n    if (!this.isValidCoordinate(row, column)) {\r\n      throw new Error(\r\n        `The ship has been placed in an out of bounds position: Row:${row} Col:${column}`\r\n      );\r\n    }\r\n\r\n    if (dir !== "horizontal" && dir !== "vertical") {\r\n      throw new Error(\r\n        "Error an invalid direction has been passed to placeShip"\r\n      );\r\n    }\r\n\r\n    if (!Ship.VALID_NAMES.includes(shipName)) {\r\n      throw new Error("The ship name passed as an arugment is invalid.");\r\n    }\r\n\r\n    // Expected Failures\r\n\r\n    if (\r\n      (dir === "horizontal" && length > horizontalSpaceLeft) ||\r\n      (dir === "vertical" && length > verticalSpaceLeft)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // Horizontal overlap\r\n    if (dir === "horizontal") {\r\n      for (let c = column; c < column + length; c++) {\r\n        if (this.#grid[row][c] !== null) {\r\n          return false; // Position already occupied\r\n        }\r\n      }\r\n    } else {\r\n      // vertical\r\n      for (let r = row; r < row + length; r++) {\r\n        if (this.#grid[r][column] !== null) {\r\n          return false; // Position already occupied\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ReceiveAttack method.\r\n   *\r\n   * Takes a pair of coordinates and determines whether or not\r\n   * a ship has been hit.\r\n   *\r\n   * Has the hit ship call the hit function or records\r\n   * the coordinates of the missed shot to prevent repeat attacks.\r\n   *\r\n   * @param {number} column - Starting column (x-coordinate)\r\n   * @param {number} row - Starting row (y-coordinate)\r\n   * @return {bool} - Returns true if a ship has been hit\r\n   */\r\n  receiveAttack(row, column) {\r\n    const key = `${row},${column}`;\r\n\r\n    if (!this.isValidCoordinate(row, column)) {\r\n      throw new Error(\r\n        `Invalid coordinate: (${row}, ${column}) is outside the board bounds.`\r\n      );\r\n    }\r\n\r\n    const alreadyAttacked =\r\n      this.#landedAttacks[key] || this.#missedAttacks[key];\r\n\r\n    if (alreadyAttacked) return null;\r\n\r\n    if (this.#grid[row][column] !== null) {\r\n      this.#grid[row][column].hit();\r\n      this.#landedAttacks[key] = true;\r\n      // console.log(this.ships);\r\n      return true;\r\n    } else {\r\n      this.#missedAttacks[key] = true;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ReportShipStatus method.\r\n   *\r\n   * Reports whether or not all of their ships have been sunk.\r\n   *\r\n   * @return {boolean} - Returns true if all ships have been sunk, false otherwise.\r\n   */\r\n  reportShipStatus() {\r\n    const ships = this.ships; // calls getter which returns cloned ships array\r\n\r\n    if (ships.length === 0) return false;\r\n\r\n    for (let ship of ships) {\r\n      if (!ship.isSunk()) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Getter for the grid.\r\n   *\r\n   * Returns a deep clone of the private #grid property.\r\n   * Each element in the grid is cloned to prevent external mutation.\r\n   * - If the element is an instance of Ship, it uses the Ship\'s clone method.\r\n   * - Otherwise, it uses structuredClone to deep clone the element.\r\n   *\r\n   * @returns {Array<Array<Object|null>>} Deep clone of the grid.\r\n   */\r\n  get grid() {\r\n    return this.#grid.map((row) => {\r\n      return row.map((col) => {\r\n        if (col != null && col instanceof Ship) return col.clone();\r\n        else {\r\n          return structuredClone(col);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * get ships Getter.\r\n   *\r\n   * Returns an array of deeply cloned ship objects.\r\n   *\r\n   * @return {Array<objects>} - Array of cloned ships.\r\n   */\r\n  get ships() {\r\n    if (!this.#ships) {\r\n      return [];\r\n    }\r\n    return Object.values(this.#ships).map((ship) => ship.clone());\r\n  }\r\n\r\n  /**\r\n   * get missedAttacks Getter.\r\n   *\r\n   * Returns a deep clone dictionary containing the missed attacks.\r\n   *\r\n   * @returns {Dictionary} - Deep clone of missed attacks.\r\n   */\r\n  get missedAttacks() {\r\n    return structuredClone(this.#missedAttacks);\r\n  }\r\n\r\n  /**\r\n   * get landedAttacks Getter.\r\n   *\r\n   * Returns a deep immutable clone of the #landedAttacks dictionary.\r\n   *\r\n   * @returns {Dictionary} - Deep clone of landed attacks.\r\n   */\r\n  get landedAttacks() {\r\n    return structuredClone(this.#landedAttacks);\r\n  }\r\n\r\n  /**\r\n   * GetShipAt Method.\r\n   *\r\n   * Returns a reference to the ship at a specific index\r\n   * within the grid.\r\n   *\r\n   * @returns {Ship} - Ship Reference\r\n   */\r\n  getShipAt(row, col) {\r\n    return this.#grid[row][col];\r\n  }\r\n\r\n  printGrid() {\r\n    let gridString = "";\r\n\r\n    for (let row = 0; row < Gameboard.BOARD_ROWS; row++) {\r\n      let rowString = "";\r\n      for (let col = 0; col < Gameboard.BOARD_COLS; col++) {\r\n        const ship = this.#grid[row][col];\r\n        if (ship !== null) {\r\n          rowString += "S "; // Mark as part of a ship\r\n        } else {\r\n          rowString += "~ "; // Empty space\r\n        }\r\n      }\r\n      gridString += rowString.trim() + "\\n";\r\n    }\r\n\r\n    console.log(gridString);\r\n  }\r\n}\r\n\n;// ./src/classes/UI.js\n\r\n\r\n\r\n/**\r\n * UI class manages the user interface for the Battleship game.\r\n *\r\n * It handles rendering and interacting with the player and computer grids,\r\n * tracking ship placement and attack positions, and managing popup modals\r\n * such as ship placement prompts and winner announcements.\r\n *\r\n * This class encapsulates private state related to ship placement and attacks,\r\n * provides methods to populate grids, add event listeners for user actions,\r\n * and update the UI based on game state changes.\r\n */\r\nclass UI {\r\n  #currentShipIndex;\r\n  #shipPlacementOrientation;\r\n  #playerShipPositions;\r\n  #playerAttackPosition;\r\n\r\n  constructor() {\r\n    this.playerGrid = document.querySelector("#player-grid");\r\n    this.computerGrid = document.querySelector("#computer-grid");\r\n\r\n    this.#currentShipIndex = 0;\r\n    this.shipsToPlace = [...Ship.VALID_NAMES];\r\n\r\n    this.cellHighlightCount = 5;\r\n    this.#shipPlacementOrientation = "horizontal";\r\n\r\n    this.#playerShipPositions = [];\r\n\r\n    this.#playerAttackPosition = null;\r\n  }\r\n\r\n  /**\r\n   * Records the player\'s attack position on the grid.\r\n   *\r\n   * This method stores the given `row` and `col` as the player\'s most recent attack position.\r\n   * It uses a private field (`#playerAttackPosition`) to ensure that the attack position\r\n   * is encapsulated and cannot be accessed directly from outside the class.\r\n   *\r\n   * @param {number} row - The row index of the attack position on the grid.\r\n   * @param {number} col - The column index of the attack position on the grid.\r\n   */\r\n  recordPlayerAttack(row, col) {\r\n    this.#playerAttackPosition = { row, col };\r\n  }\r\n\r\n  /**\r\n   * Records the position, ship name, and direction of a ship placement.\r\n   *\r\n   * Assumes that `this.currentShip` and `this.shipPlacementOrientation` are\r\n   * already set before calling this method.\r\n   *\r\n   * @param {number} row - The row coordinate of the ship placement.\r\n   * @param {number} col - The column coordinate of the ship placement.\r\n   */\r\n  recordShipPosition(row, col) {\r\n    const shipPosition = {\r\n      row,\r\n      col,\r\n      shipName: this.currentShip,\r\n      direction: this.shipPlacementOrientation,\r\n    };\r\n\r\n    this.#playerShipPositions.push(shipPosition);\r\n  }\r\n\r\n  /**\r\n   * Advances to the next ship in the placement sequence.\r\n   * Updates the UI prompt to indicate the next ship to be placed.\r\n   * Resets the cell highlight count based on the length of the current ship.\r\n   * If all ships have been placed, sets the current ship index to null and resets highlight count.\r\n   */\r\n  advanceToNextShip() {\r\n    const shipSelectionDiv = document.querySelector("#shipSelection");\r\n\r\n    this.#currentShipIndex++;\r\n\r\n    if (shipSelectionDiv) {\r\n      shipSelectionDiv.textContent = `Place your ${this.currentShip}`;\r\n    }\r\n\r\n    this.cellHighlightCount = Ship.VALID_LENGTHS[this.currentShip];\r\n\r\n    if (this.#currentShipIndex >= this.shipsToPlace.length) {\r\n      this.#currentShipIndex = null; // Sets to null at end\r\n      this.cellHighlightCount = 1;\r\n\r\n      this.closeShipPopup();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes the ship placement popup by hiding its overlay element.\r\n   * Sets the display style of the popup element with ID "placeShipOverlay" to "none".\r\n   */\r\n  closeShipPopup() {\r\n    const popup = document.querySelector("#placeShipOverlay");\r\n\r\n    if (popup) {\r\n      placeShipOverlay.style.display = "none";\r\n    }\r\n  }\r\n\r\n  getPlayerAttackPosition() {\r\n    const position = this.#playerAttackPosition;\r\n    this.#playerAttackPosition = null;\r\n\r\n    return position;\r\n  }\r\n\r\n  getPlayerShipPositions() {\r\n    return this.#playerShipPositions;\r\n  }\r\n\r\n  get playerAttackPosition() {\r\n    return this.#playerAttackPosition;\r\n  }\r\n\r\n  get playerShipPositions() {\r\n    return this.#playerShipPositions;\r\n  }\r\n\r\n  get currentShipIndex() {\r\n    return this.#currentShipIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the name of the ship currently being placed.\r\n   * If all ships have been placed, returns null.\r\n   */\r\n  get currentShip() {\r\n    return this.shipsToPlace[this.#currentShipIndex] || null;\r\n  }\r\n\r\n  get shipPlacementOrientation() {\r\n    return this.#shipPlacementOrientation;\r\n  }\r\n\r\n  set shipPlacementOrientation(orientation) {\r\n    if (orientation === "horizontal" || orientation === "vertical") {\r\n      this.#shipPlacementOrientation = orientation;\r\n    } else {\r\n      throw new Error("Invalid orientation");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Populates a container element with a grid of elements.=\r\n   *\r\n   * @param {HTMLElement} gridContainer - The DOM element to which the grid rows will be appended.\r\n   * @param {Object} options - Configuration options for the grid.\r\n   * @param {number} options.row - The number of rows to create.\r\n   * @param {number} options.col - The number of columns to create per row.\r\n   * @param {function(number, number): HTMLElement} options.createCell -\r\n   *        A callback function that returns a cell element given the row and column indices.\r\n   */\r\n  populateGrid(\r\n    gridContainer,\r\n    { row: rows, col: cols, createCell: createCell }\r\n  ) {\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let col = 0; col < cols; col++) {\r\n        const cell = createCell(row, col);\r\n        gridContainer.append(cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a grid cell element with row and column data attributes.\r\n   *\r\n   * @param {number} row - The row index of the cell.\r\n   * @param {number} col - The column index of the cell.\r\n   * @returns {HTMLElement} A div element representing a grid cell,\r\n   *                       with dataset attributes for row and column,\r\n   *                       and a CSS class "grid-cell" applied.\r\n   */\r\n  createCell(row, col) {\r\n    const cell = document.createElement("div");\r\n\r\n    cell.dataset.row = row;\r\n    cell.dataset.col = col;\r\n    cell.classList.add("grid-cell");\r\n\r\n    return cell;\r\n  }\r\n\r\n  /**\r\n   * Adds click event listeners to all cells in a grid.\r\n   * Attatches handlers depening on grid id.\r\n   *\r\n   * @param {HTMLElement} gridContainer - The grid DOM element.\r\n   * @param {Function} verifyShipPlacementFn - Dependency Injection.\r\n   */\r\n  addGridClickListeners(gridContainer, verifyShipPlacementFn) {\r\n    const isShipPlacementGrid = gridContainer.id === "shipPlacement";\r\n    const isOpponentGrid = gridContainer.id === "computer-grid";\r\n\r\n    if (!isShipPlacementGrid && !isOpponentGrid) return;\r\n\r\n    const handler = isShipPlacementGrid\r\n      ? this.handleRecordShipClick.bind(this)\r\n      : this.handleRecordAttackClick.bind(this);\r\n\r\n    for (let row = 0; row < Gameboard.BOARD_ROWS; row++) {\r\n      for (let col = 0; col < Gameboard.BOARD_COLS; col++) {\r\n        const cell = this.getCell(gridContainer, row, col);\r\n\r\n        cell.addEventListener("click", () => {\r\n          handler(row, col, verifyShipPlacementFn);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles a single click event for placing a ship on the gameboard.\r\n   * Verifies the placement, records the ship position if valid, and advances to the next ship.\r\n   *\r\n   * @param {number} row - The row index of the clicked cell.\r\n   * @param {number} col - The column index of the clicked cell.\r\n   * @param {Function} verifyShipPlacementFn - Function to check if the ship can be placed at the given location.\r\n   */\r\n  handleRecordShipClick(row, col, verifyShipPlacementFn) {\r\n    const isValidPlacement = verifyShipPlacementFn(\r\n      row,\r\n      col,\r\n      this.currentShip,\r\n      this.shipPlacementOrientation,\r\n      Ship.VALID_LENGTHS[this.currentShip]\r\n    );\r\n\r\n    if (!isValidPlacement) return;\r\n\r\n    this.recordShipPosition(row, col);\r\n\r\n    this.markCellsAsPlaced(row, col);\r\n    this.advanceToNextShip();\r\n  }\r\n\r\n  handleRecordAttackClick(row, col) {\r\n    this.recordPlayerAttack(row, col);\r\n  }\r\n\r\n  /**\r\n   * Adds a \'hit\' or \'miss\' class to a grid cell based on attack result.\r\n   *\r\n   * Selects the player\'s or computer\'s grid depending on `currentTurn`, then\r\n   * marks the cell at (`row`, `col`) as hit or miss. If the cell doesn\'t exist, does nothing.\r\n   *\r\n   * @param {number} row - Row index of the target cell.\r\n   * @param {number} col - Column index of the target cell.\r\n   * @param {\'player\'|\'computer\'} currentTurn - Whose grid to update.\r\n   * @param {boolean | null} isHit - True if attack was a hit; false if a miss or null on already attacked.\r\n   * @returns {void}\r\n   */\r\n  markCellBasedOnHit(row, col, currentTurn, isHit) {\r\n    if (isHit == null) return;\r\n\r\n    const grid =\r\n      currentTurn == "player"\r\n        ? document.querySelector("#player-grid")\r\n        : document.querySelector("#computer-grid");\r\n\r\n    const cell = this.getCell(grid, row, col);\r\n\r\n    if (!cell) return;\r\n\r\n    if (isHit) {\r\n      cell.classList.add("hit");\r\n      cell.classList.remove("miss");\r\n    } else {\r\n      cell.classList.add("miss");\r\n      cell.classList.remove("hit");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds the \'placed\' CSS class to all grid cells corresponding to the given row and column\r\n   * in both the ship placement popup (#placeShipPopup) and the main player grid (#player-grid).\r\n   * Assumes that valid row and column values are provided.\r\n   *\r\n   * @param {number} row - The row index of the cells to mark.\r\n   * @param {number} col - The column index of the cells to mark.\r\n   */\r\n  markCellsAsPlaced(row, col) {\r\n    const placeShipPopup = document.querySelector("#placeShipPopup");\r\n    const playerGrid = document.querySelector("#player-grid");\r\n\r\n    const popupCells = placeShipPopup\r\n      ? this.getCellGroup(placeShipPopup, row, col)\r\n      : [];\r\n    const playerCells = playerGrid\r\n      ? this.getCellGroup(playerGrid, row, col)\r\n      : [];\r\n\r\n    const allCells = [...popupCells, ...playerCells];\r\n\r\n    for (const cell of allCells) {\r\n      cell.classList.add("placed");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the cell element at the specified row and column within the grid container.\r\n   *\r\n   * @param {HTMLElement} gridContainer - The container element holding the grid cells.\r\n   * @param {number} row - The zero-based row index of the desired cell.\r\n   * @param {number} col - The zero-based column index of the desired cell.\r\n   * @returns {HTMLElement | null} The cell element matching the given row and column, or null if not found.\r\n   */\r\n  getCell(gridContainer, row, col) {\r\n    const selector = `.grid-cell[data-row="${row}"][data-col="${col}"]`;\r\n    return gridContainer.querySelector(selector);\r\n  }\r\n\r\n  /**\r\n   * Retrieves a group of cells from the grid starting at the specified row and column,\r\n   * extending in the direction specified by the ship placement orientation.\r\n   *\r\n   * @param {HTMLElement} gridContainer - The container element representing the grid.\r\n   * @param {number} row - The starting row index in the grid.\r\n   * @param {number} col - The starting column index in the grid.\r\n   * @returns {Array<HTMLElement>} An array of cell elements that form the group based on the current cellHighlightCount and orientation.\r\n   */\r\n  getCellGroup(gridContainer, row, col) {\r\n    let rowPosition = row;\r\n    let colPosition = col;\r\n\r\n    const cellGroup = [];\r\n\r\n    for (let count = 0; count < this.cellHighlightCount; count++) {\r\n      const cell = this.getCell(gridContainer, rowPosition, colPosition);\r\n\r\n      if (cell) cellGroup.push(cell); // Handles edge cases\r\n\r\n      if (this.#shipPlacementOrientation == "horizontal") colPosition++;\r\n      if (this.#shipPlacementOrientation == "vertical") rowPosition++;\r\n    }\r\n\r\n    return cellGroup;\r\n  }\r\n\r\n  /**\r\n   * Adds hover event listeners to each grid cell that apply or remove\r\n   * a "hover-effect" class to a group of cells (not just the one hovered).\r\n   *\r\n   * This is used to visually preview multi-cell ship placement\r\n   * by highlighting a group of cells starting from the hovered cell,\r\n   * determined by getCellGroup().\r\n   */\r\n  addGridHoverListeners(gridContainer) {\r\n    const cells = gridContainer.querySelectorAll(".grid-cell");\r\n\r\n    cells.forEach((cell) => {\r\n      const row = parseInt(cell.dataset.row, 10);\r\n      const col = parseInt(cell.dataset.col, 10);\r\n\r\n      cell.addEventListener("mouseenter", () => {\r\n        const group = this.getCellGroup(gridContainer, row, col);\r\n        group.forEach((c) => c.classList.add("hover-effect"));\r\n      });\r\n\r\n      cell.addEventListener("mouseleave", () => {\r\n        const group = this.getCellGroup(gridContainer, row, col);\r\n        group.forEach((c) => c.classList.remove("hover-effect"));\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates and displays the "Place Your Ships" popup UI for ship placement.\r\n   *\r\n   * This method generates a popup modal that includes:\r\n   * - A header prompting the player to place ships\r\n   * - A ship selection section\r\n   * - An orientation switch (horizontal/vertical)\r\n   * - A grid for ship placement\r\n   *\r\n   * It also attaches necessary event listeners for hover effects and click events.\r\n   *\r\n   * It is called when the user clicks a valid placement cell.\r\n   * @returns {HTMLElement} The DOM element representing the popup (for possible later reference or removal).\r\n   */\r\n  createShipPopup(verifyShipPlacementFn) {\r\n    const HTMLBody = document.querySelector("body");\r\n    const popup = document.createElement("div");\r\n\r\n    popup.id = "placeShipPopup";\r\n    popup.classList.add("popup");\r\n\r\n    // Header\r\n    const header = document.createElement("h2");\r\n    header.textContent = "Welcome to Battleship!";\r\n    popup.append(header);\r\n\r\n    // Ship Selection\r\n\r\n    const shipSelectionDiv = document.createElement("div");\r\n    shipSelectionDiv.id = "shipSelection";\r\n    shipSelectionDiv.textContent = `Place your ${this.currentShip}`;\r\n    popup.append(shipSelectionDiv);\r\n\r\n    // Placement Orientation\r\n\r\n    const orientationSwitch = this.createOrientationSwitch();\r\n    popup.append(orientationSwitch);\r\n\r\n    // Ship Placement Grid\r\n\r\n    const placementGridDiv = document.createElement("div");\r\n    placementGridDiv.id = "shipPlacement";\r\n    placementGridDiv.classList.add("grid-small");\r\n    this.populateGrid(placementGridDiv, {\r\n      row: Gameboard.BOARD_ROWS,\r\n      col: Gameboard.BOARD_COLS,\r\n      createCell: this.createCell,\r\n    });\r\n    this.addGridHoverListeners(placementGridDiv);\r\n    this.addGridClickListeners(placementGridDiv, verifyShipPlacementFn);\r\n    popup.append(placementGridDiv);\r\n\r\n    // Blur Overlay\r\n    const overlay = this.createBlurOverlay();\r\n    overlay.id = "placeShipOverlay";\r\n    overlay.append(popup);\r\n\r\n    HTMLBody.append(overlay);\r\n\r\n    return popup;\r\n  }\r\n\r\n  /**\r\n   * Displays the winner announcement popup on the screen.\r\n   *\r\n   * This method creates a popup element showing the winner\'s information,\r\n   * along with an overlay that blurs the background for focus.\r\n   * It appends the popup to the overlay and returns the overlay element.\r\n   *\r\n   * @param {string} winner - The name or identifier of the winner to display.\r\n   * @param {Function} playAgainFn - Callback function to invoke when the user chooses to play again.\r\n   * @param {Function} AppFn - Callback function related to the app\'s main functionality (e.g., to reset or navigate).\r\n   * @returns {HTMLElement} The overlay element containing the winner popup.\r\n   */\r\n  displayWinner(winner, playAgainFn, AppFn) {\r\n    const popup = this.createWinnerPopup(winner, playAgainFn, AppFn);\r\n    const overlay = this.createBlurOverlay();\r\n\r\n    overlay.append(popup);\r\n\r\n    return overlay;\r\n  }\r\n\r\n  /**\r\n   * Creates a popup element displaying the winner\'s name.\r\n   *\r\n   * This method generates a <div> element with a header (<h1>) containing\r\n   * the provided winner\'s name. The popup is assigned the ID "winnerPopup".\r\n   *\r\n   * @param {string} winner - The name or identifier of the winner.\r\n   * @param {Function} playAgainFn - Callback function to invoke when the play-again button is clicked.\r\n   * @param {Function} AppFn - Callback function to handle additional app logic on play again.\r\n   * @returns {HTMLDivElement} The DOM element representing the winner popup.\r\n   *\r\n   */\r\n  createWinnerPopup(winner, playAgainFn, AppFn) {\r\n    const popup = document.createElement("div");\r\n    const header = document.createElement("h1");\r\n\r\n    header.textContent = `${winner} Won!`;\r\n\r\n    popup.append(header);\r\n    popup.id = "winnerPopup";\r\n    popup.classList = "popup";\r\n\r\n    const button = this.createPlayAgainButton(playAgainFn, AppFn);\r\n    popup.append(button);\r\n\r\n    return popup;\r\n  }\r\n\r\n  /**\r\n   * Creates a "Play Again" button for restarting the Battleship game.\r\n   *\r\n   * @param {Function} playAgainFn - Callback function to reset the game state and UI.\r\n   *                                 It receives `resetGameUI` and `AppFn` as parameters.\r\n   * @param {Function} AppFn - Additional callback function related to the app\'s main logic.\r\n   * @returns {HTMLButtonElement} The configured "Play Again" button element.\r\n   */\r\n  createPlayAgainButton(playAgainFn, AppFn) {\r\n    const button = document.createElement("button");\r\n    button.id = "playAgainButton";\r\n    button.textContent = "Play Again";\r\n\r\n    button.addEventListener("click", () => {\r\n      playAgainFn(this.resetGameUI, AppFn);\r\n    });\r\n\r\n    return button;\r\n  }\r\n\r\n  /**\r\n   * Creates and appends a blur overlay to the document body.\r\n   *\r\n   * This method generates a <div> element with the class "blurOverlay",\r\n   * appends it to the <body>, and returns the overlay element.\r\n   * The overlay is typically used to dim or blur the background\r\n   * when displaying modal content like a winner popup.\r\n   *\r\n   * @returns {HTMLDivElement} The DOM element representing the blur overlay.\r\n   */\r\n  createBlurOverlay() {\r\n    const HTMLBody = document.querySelector("body");\r\n    const overlay = document.createElement("div");\r\n\r\n    overlay.classList.add("blurOverlay");\r\n\r\n    HTMLBody.append(overlay);\r\n\r\n    return overlay;\r\n  }\r\n\r\n  /**\r\n   * Creates and returns a DOM element containing a pair of radio buttons\r\n   * for selecting orientation: "Horizontal" or "Vertical".\r\n   *\r\n   * - Each radio button is associated with a label.\r\n   * - Both inputs share the same \'name\' attribute ("orientation") so only one can be selected at a time.\r\n   * - The returned <div> can be appended to the DOM wherever needed.\r\n   *\r\n   * @returns {HTMLDivElement} A <div> containing labeled radio buttons for orientation selection.\r\n   */\r\n  createOrientationSwitch() {\r\n    const div = document.createElement("div");\r\n    div.id = "orientationSwitch";\r\n\r\n    const horizontalLabel = document.createElement("label");\r\n    horizontalLabel.textContent = "Horizontal";\r\n    div.appendChild(horizontalLabel);\r\n\r\n    const verticalLabel = document.createElement("label");\r\n    verticalLabel.textContent = "Vertical";\r\n    div.appendChild(verticalLabel);\r\n\r\n    const horizontalSwitch = document.createElement("input");\r\n    horizontalSwitch.id = "horizontalSwitch";\r\n    horizontalSwitch.type = "radio";\r\n    horizontalSwitch.checked = "checked";\r\n    horizontalSwitch.name = "orientation";\r\n    this.addSwitchChangeListener(horizontalSwitch);\r\n    horizontalLabel.appendChild(horizontalSwitch);\r\n\r\n    const verticalSwitch = document.createElement("input");\r\n    verticalSwitch.id = "verticalSwitch";\r\n    verticalSwitch.type = "radio";\r\n    verticalSwitch.name = "orientation";\r\n    this.addSwitchChangeListener(verticalSwitch);\r\n    verticalLabel.appendChild(verticalSwitch);\r\n\r\n    return div;\r\n  }\r\n\r\n  /**\r\n   * Adds a click event listener to the given input element.\r\n   * When clicked, this toggles the shipPlacementOrientation property via its setter.\r\n   *\r\n   * @param {HTMLElement} inputEle - The input element to attach the click listener to.\r\n   * @returns {HTMLElement} The same input element, with the listener attached.\r\n   */\r\n  addSwitchChangeListener(inputEle) {\r\n    inputEle.addEventListener("change", () => {\r\n      const nextOrientation =\r\n        this.shipPlacementOrientation == "horizontal"\r\n          ? "vertical"\r\n          : "horizontal";\r\n\r\n      this.shipPlacementOrientation = nextOrientation; // Toggles setter\r\n    });\r\n\r\n    return inputEle;\r\n  }\r\n\r\n  /**\r\n   * Clears all grids and removes all popups and blur overlays from the DOM.\r\n   */\r\n  resetGameUI() {\r\n    const allGrids = Array.from(document.querySelectorAll(".grid"));\r\n    const popups = Array.from(document.querySelectorAll(".popup"));\r\n    const overlays = Array.from(document.querySelectorAll(".blurOverlay"));\r\n\r\n    if (allGrids) {\r\n      allGrids.forEach((grid) => {\r\n        grid.innerHTML = "";\r\n      });\r\n    }\r\n\r\n    if (popups) {\r\n      popups.forEach((popup) => {\r\n        popup.remove();\r\n      });\r\n    }\r\n\r\n    overlays.forEach((overlay) => {\r\n      overlay.remove();\r\n    });\r\n  }\r\n}\r\n\n;// ./src/classes/GameController.js\n/**\r\n * GameController\r\n *\r\n * This class manages the core gameplay logic for a Battleship-style game,\r\n * coordinating between the player and computer entities, their gameboards,\r\n * and handling turns, attacks, and game state transitions.\r\n *\r\n * Responsibilities include:\r\n * - Managing game state (current turn, game over status, winner)\r\n * - Handling asynchronous player input for ship placement and attacks\r\n * - Executing game rounds with alternating turns between player and computer\r\n * - Placing ships for both player and computer\r\n * - Checking for game over conditions\r\n * - Resetting and replaying the game\r\n *\r\n * The class relies heavily on dependency injection for UI interactions,\r\n * such as obtaining player inputs and updating the UI based on game events,\r\n * allowing the core game logic to be independent of any specific UI framework.\r\n *\r\n * Usage typically involves:\r\n * 1. Instantiating with player and computer objects (each with gameboards)\r\n * 2. Starting the game loop via playGame, providing UI callbacks for input/output\r\n * 3. Handling game rounds until a winner is declared\r\n * 4. Offering ability to reset and replay the game\r\n */\r\nclass GameController {\r\n  constructor(player, computer) {\r\n    this.player = player;\r\n    this.computer = computer;\r\n    this.currentTurn = "player";\r\n    this.gameOver = false;\r\n    this.winner = null;\r\n  }\r\n\r\n  /**\r\n   * Repeatedly checks the player\'s ship positions every 500ms until 5 or more ships have been placed.\r\n   * Once the condition is met, the polling stops and the function resolves with the final ship positions.\r\n   *\r\n   * @param {Function} getPlayerShipPositions - A function that returns the current array of player ship positions.\r\n   * @returns {Promise<Array>} A promise that resolves with the ship positions once 5 or more are recorded.\r\n   */\r\n  waitForFiveShips(getPlayerShipPositions) {\r\n    return new Promise((resolve) => {\r\n      const interval = setInterval(() => {\r\n        const positions = getPlayerShipPositions();\r\n\r\n        if (positions.length >= 5) {\r\n          clearInterval(interval);\r\n          resolve(positions);\r\n        }\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  async waitForPlayerAttack(getPlayerAttackPosition) {\r\n    return new Promise((resolve) => {\r\n      const interval = setInterval(() => {\r\n        const position = getPlayerAttackPosition();\r\n\r\n        if (\r\n          position &&\r\n          typeof position === "object" &&\r\n          Number.isInteger(position.row) &&\r\n          Number.isInteger(position.col)\r\n        ) {\r\n          clearInterval(interval);\r\n          resolve(position);\r\n        }\r\n      }, 100);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a default attack position used when no player input is available.\r\n   * Currently hardcoded to the top-left corner (0, 0).\r\n   * This is used as a fallback in test environments or non-interactive scenarios.\r\n   *\r\n   * @returns {{ row: number, col: number }} A default attack coordinate.\r\n   */\r\n  getDefaultAttackPosition() {\r\n    return { row: 0, col: 0 };\r\n  }\r\n\r\n  /**\r\n   * Starts the game.\r\n   *\r\n   * @param {Function} getPlayerShipPositions - UI Dependency Injection\r\n   * @param {Function} getPlayerAttackPositon - UI Dependency Injection\r\n   * @param {Function} displayWinner - UI Dependency Injection\r\n   * @param {function} markCellBasedOnHit - UI DI used to mark cells on an attack.\r\n   * @param {function} AppFn\r\n   */\r\n  async playGame(\r\n    getPlayerShipPositions,\r\n    getPlayerAttackPositon,\r\n    displayWinner,\r\n    markCellBasedOnHit,\r\n    AppFn\r\n  ) {\r\n    await this.setupGame(getPlayerShipPositions);\r\n\r\n    while (!this.gameOver) {\r\n      await this.playRound({\r\n        getPlayerAttackPosition: getPlayerAttackPositon,\r\n        markCellBasedOnHit: markCellBasedOnHit,\r\n      });\r\n    }\r\n\r\n    displayWinner(this.winner, this.playAgain, AppFn);\r\n  }\r\n\r\n  /**\r\n   * Resets game state variables, ensuring game is ready to replay.\r\n   */\r\n  resetGame() {\r\n    this.currentTurn = "player";\r\n    this.gameOver = false;\r\n    this.winner = null;\r\n\r\n    this.player.gameboard.resetBoard();\r\n    this.computer.gameboard.resetBoard();\r\n  }\r\n\r\n  /**\r\n   * Sets up the gameplay loop by reseting game state\r\n   * variables and placing ships.\r\n   *\r\n   * @param {Function} getPlayerShipPositions UI Dependency Injection\r\n   */\r\n  async setupGame(getPlayerShipPositions) {\r\n    // Reset game state variables.\r\n    this.resetGame();\r\n    // Get Player input from UI and PlaceAllShips using their ship positions\r\n    const playerShipPostions = await this.waitForFiveShips(\r\n      getPlayerShipPositions\r\n    );\r\n    this.placeAllShips(playerShipPostions);\r\n  }\r\n\r\n  /**\r\n   * Determines whether the game if over by checking\r\n   * if any fleet has been sunk.\r\n   */\r\n  isGameOver() {\r\n    const isComputerFleetSunk = this.computer.gameboard.reportShipStatus();\r\n    const isPlayerFleetSunk = this.player.gameboard.reportShipStatus();\r\n\r\n    if (isComputerFleetSunk || isPlayerFleetSunk) this.gameOver = true;\r\n\r\n    if (isComputerFleetSunk) {\r\n      this.winner = "player";\r\n    } else if (isPlayerFleetSunk) {\r\n      this.winner = "computer";\r\n    }\r\n\r\n    return this.gameOver;\r\n  }\r\n\r\n  /**\r\n   * Executes a full round of gameplay consisting of one player attack\r\n   * followed by one computer attack. Updates the game state accordingly.\r\n   *\r\n   * - Skips execution if the game is already over.\r\n   * - Waits for player\'s input (via injected UI method) or defaults to a fallback.\r\n   * - Applies hit/miss logic and updates the board using the injected UI handler.\r\n   *\r\n   * @param {Object} params\r\n   * @param {Function} params.getPlayerAttackPosition - UI dependency to get player\'s attack input.\r\n   * @param {Function} params.markCellBasedOnHit - UI dependency used to update the board with hit/miss.\r\n   *\r\n   * @returns {Promise<void>}\r\n   */\r\n  async playRound({\r\n    getPlayerAttackPosition: getPlayerAttackPosition,\r\n    markCellBasedOnHit: markCellBasedOnHit,\r\n  }) {\r\n    if (this.isGameOver()) return;\r\n\r\n    // Player\'s attack\r\n    const playerAttackPosition =\r\n      typeof getPlayerAttackPosition === "function"\r\n        ? await this.waitForPlayerAttack(getPlayerAttackPosition)\r\n        : this.getDefaultAttackPosition();\r\n\r\n    const { row, col } = playerAttackPosition;\r\n    this.takeTurn({\r\n      row: row,\r\n      col: col,\r\n      markCellBasedOnHit: markCellBasedOnHit,\r\n    });\r\n\r\n    if (this.isGameOver()) return;\r\n\r\n    // Computer\'s attack\r\n    this.takeTurn({ markCellBasedOnHit: markCellBasedOnHit });\r\n  }\r\n\r\n  /**\r\n   * Handles the logic for a player\'s or computer\'s turn.\r\n   * Executes an attack based on the current turn,\r\n   * then alternates the turn.\r\n   *\r\n   * @param {number} [row] - The row coordinate of the attack (player only).\r\n   * @param {number} [col] - The column coordinate of the attack (player only).\r\n   * @param {function} markCellBasedOnHit - UI DI used to mark cells on an attack.\r\n   */\r\n  takeTurn({ row: row, col: col, markCellBasedOnHit: markCellBasedOnHit }) {\r\n    const player = this.player;\r\n    const computer = this.computer;\r\n\r\n    if (this.gameOver) return;\r\n\r\n    const opponent =\r\n      this.currentTurn === "player" ? this.computer : this.player;\r\n    const opponentType = this.currentTurn === "player" ? "computer" : "player";\r\n\r\n    if (this.currentTurn == "player") {\r\n      const opponentHit = player.attack(opponent, row, col);\r\n      markCellBasedOnHit(row, col, opponentType, opponentHit);\r\n    } else if (this.currentTurn == "computer") {\r\n      const { playerHit, row, col } = computer.randomAttack(opponent);\r\n      markCellBasedOnHit(row, col, opponentType, playerHit);\r\n    }\r\n\r\n    this.currentTurn = this.currentTurn === "player" ? "computer" : "player";\r\n  }\r\n\r\n  /**\r\n   * placeAllShips Method.\r\n   *\r\n   * Places all of the player\'s and computer\'s ships on the board.\r\n   *\r\n   * @param {Array<object>} shipPositions - An array of ship positions for the player.\r\n   * @return {Boolean} - Returns true if all ships are placed successfully, false otherwise.\r\n   */\r\n  placeAllShips(shipPositions) {\r\n    let success = true;\r\n\r\n    if (!this.placePlayerShips(shipPositions)) {\r\n      success = false;\r\n    }\r\n\r\n    if (!this.placeComputerShips("randomly")) {\r\n      success = false;\r\n    }\r\n\r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * Places all ships for the player based on positions from the UI.\r\n   *\r\n   * @param {Array<Object>} shipPositions - Array of ship position objects.\r\n   * @returns {boolean} True if all ships placed successfully, otherwise false.\r\n   */\r\n  placePlayerShips(shipPositions) {\r\n    const validKeys = ["row", "col", "shipName", "direction"];\r\n\r\n    for (const shipPosition of shipPositions) {\r\n      if (\r\n        typeof shipPosition !== "object" ||\r\n        shipPosition === null ||\r\n        !validKeys.every((key) => key in shipPosition)\r\n      ) {\r\n        throw new Error("Error, one of the ship positions has invalid keys");\r\n      }\r\n    }\r\n\r\n    for (const shipPosition of shipPositions) {\r\n      const result = this.player.placeShip(\r\n        shipPosition["row"],\r\n        shipPosition["col"],\r\n        shipPosition["shipName"],\r\n        shipPosition["direction"]\r\n      );\r\n\r\n      if (!result) {\r\n        return false; // This now exits placePlayerShips immediately\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n  /**\r\n   * PlaceComputerShips Method.\r\n   *\r\n   * Calls a method in Computer handling all ship placement.\r\n   *\r\n   * @param {String} - Method name\r\n   * @return {Boolean} True if on success else false.\r\n   */\r\n  placeComputerShips(methodName) {\r\n    methodName = `placeShips${this.capitalize(methodName)}`;\r\n\r\n    if (typeof this.computer[methodName] === "function") {\r\n      return this.computer[methodName]();\r\n    } else {\r\n      throw new Error(`Invalid method: ${methodName}`);\r\n    }\r\n  }\r\n\r\n  capitalize(methodName) {\r\n    return methodName.charAt(0).toUpperCase() + methodName.slice(1);\r\n  }\r\n\r\n  /*\r\n   * Resets gamestate and UI allowing the game to be replayed\r\n   */\r\n  playAgain(resetGameUIFn, appFn) {\r\n    if (typeof resetGameUIFn === "function") resetGameUIFn();\r\n    if (typeof appFn === "function") appFn();\r\n  }\r\n}\r\n\n;// ./src/classes/Player.js\n/**\r\n * Represents a player in the Battleship game.\r\n *\r\n * Encapsulates a gameboard and provides methods to:\r\n * - Attack an opponent\'s gameboard.\r\n * - Place ships on the player\'s own gameboard.\r\n *\r\n * This class acts as an interface between the game controller and the underlying gameboard,\r\n * abstracting gameboard operations behind player actions.\r\n */\r\nclass Player {\r\n  constructor(gameboard) {\r\n    this.gameboard = gameboard;\r\n  }\r\n\r\n  /**\r\n   * Attack method.\r\n   *\r\n   * Executes an attack on the opponent\'s gameboard at the given coordinates.\r\n   * This is a wrapper that delegates the attack to the opponent\'s gameboard,\r\n   * allowing the controller to interact through the Player interface.\r\n   *\r\n   * @param {Player} opponent - The opposing player being attacked\r\n   * @param {number} row - The row coordinate of the attack\r\n   * @param {number} column - The column coordinate of the attack\r\n   * @returns {*} Result from the opponent\'s gameboard.receiveAttack method\r\n   */\r\n  attack(opponent, row, column) {\r\n    return opponent.gameboard.receiveAttack(row, column);\r\n  }\r\n\r\n  /**\r\n   * PlaceShip method.\r\n   *\r\n   * Places a ship on the player\'s gameboard.\r\n   * This is a wrapper method to delegate ship placement to the underlying gameboard.\r\n   * Used during game setup to encapsulate gameboard access within the Player interface.\r\n   *\r\n   * @param {number} row - Starting row for the ship\r\n   * @param {number} column - Starting column for the ship\r\n   * @param {string} shipName - Identifier for the ship type\r\n   * @param {string} direction - \'horizontal\' or \'vertical\'\r\n   * @returns {*} Result from the gameboard\'s placeShip method\r\n   */\r\n  placeShip(row, column, shipName, direction) {\r\n    return this.gameboard.placeShip(row, column, shipName, direction);\r\n  }\r\n}\r\n\n;// ./src/classes/Computer.js\n\r\n\r\n/**\r\n * Computer AI Controller for Battleship.\r\n *\r\n * This class serves as an autonomous wrapper for the computer player,\r\n * managing its ship placement and attack behavior.\r\n *\r\n * Responsibilities include:\r\n * - Placing the entire fleet on the board using retry logic to ensure valid placement.\r\n * - Executing random attacks on the opponent while avoiding duplicate attacks by\r\n *   tracking previous moves.\r\n *\r\n * Constants:\r\n * - MAX_FLEET_PLACEMENT_ATTEMPTS: Maximum retries to place the entire fleet.\r\n * - MAX_SHIP_PLACEMENT_ATTEMPTS: Maximum retries to place a single ship.\r\n *\r\n * Usage:\r\n * Instantiate with a computer player object, then call methods to place ships and perform attacks.\r\n */\r\nclass Computer {\r\n  static MAX_FLEET_PLACEMENT_ATTEMPTS = 5;\r\n  static MAX_SHIP_PLACEMENT_ATTEMPTS = 100;\r\n  static PLACEMENT_METHODS = ["randomly"];\r\n\r\n  #previousAttacks;\r\n\r\n  constructor(computerPlayer) {\r\n    this.player = computerPlayer;\r\n    this.gameboard = this.player.gameboard;\r\n\r\n    this.#previousAttacks = new Set();\r\n  }\r\n\r\n  /**\r\n   * Executes a random attack on the opponent.\r\n   *\r\n   * Generates a random row and column (0–9) and calls the player\'s attack\r\n   * method using those coordinates against the provided opponent.\r\n   *\r\n   * @param {object} opponent - The target of the attack.\r\n   * @returns {{ row: number, col: number, playerHit: * }} - The attack coordinates and the result of player.attack().\r\n   */\r\n  randomAttack(opponent) {\r\n    let row, col, key;\r\n\r\n    do {\r\n      row = this.getRandomInt(0, 9);\r\n      col = this.getRandomInt(0, 9);\r\n      key = `${row},${col}`;\r\n    } while (this.#previousAttacks.has(key));\r\n\r\n    this.#previousAttacks.add(key);\r\n\r\n    const playerHit = this.player.attack(opponent, row, col);\r\n    return { row, col, playerHit };\r\n  }\r\n\r\n  /**\r\n   * placeShipsRandomly method.\r\n   *\r\n   * Handles the ship placement of the entire fleet by calling tryPlaceShip\r\n   * with random arguments.\r\n   *\r\n   * @return {bool} - True on success, else false.\r\n   */\r\n  placeShipsRandomly() {\r\n    const gameboard = this.gameboard;\r\n    let fleetPlaced = false;\r\n    let attempts = 0;\r\n\r\n    while (!fleetPlaced && attempts < Computer.MAX_FLEET_PLACEMENT_ATTEMPTS) {\r\n      gameboard.resetBoard();\r\n      let shipsPlaced = 0;\r\n\r\n      Ship.VALID_NAMES.forEach((shipName) => {\r\n        const isSuccessful = this.tryPlaceShip(shipName);\r\n\r\n        if (isSuccessful) {\r\n          shipsPlaced++;\r\n        }\r\n      });\r\n\r\n      if (shipsPlaced == Ship.VALID_NAMES.length) {\r\n        fleetPlaced = true;\r\n      } else {\r\n        attempts++; // Increment per failed fleet placement\r\n      }\r\n    }\r\n\r\n    return fleetPlaced;\r\n  }\r\n\r\n  /**\r\n   * tryPlaceShip method.\r\n   *\r\n   * Called during placeShipsRandommly for ship placement.\r\n   *\r\n   * @param {string} shipName\r\n   * @return {bool} True on success, else false.\r\n   */\r\n  tryPlaceShip(shipName) {\r\n    let placed = false;\r\n    let attempts = 0;\r\n\r\n    while (!placed && attempts < Computer.MAX_SHIP_PLACEMENT_ATTEMPTS) {\r\n      let rX = this.getRandomInt(0, 9);\r\n      let rY = this.getRandomInt(0, 9);\r\n      let direction = Math.random() < 0.5 ? "horizontal" : "vertical";\r\n\r\n      const isSuccessful = this.player.placeShip(rX, rY, shipName, direction);\r\n\r\n      if (isSuccessful) {\r\n        placed = true;\r\n      } else {\r\n        attempts++;\r\n      }\r\n    }\r\n\r\n    return placed;\r\n  }\r\n\r\n  /**\r\n   * getRandomInt method.\r\n   *\r\n   * Returns a number between a min and a max.\r\n   *\r\n   * @param {number} - Mininum limit\r\n   * @param {number} - Maximum limit\r\n   * @return {number} - Random number.\r\n   */\r\n  getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n}\r\n\n;// ./src/classes/index.js\n// Re-export all classes from this folder for cleaner imports\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n;// ./src/App.js\n\r\n\r\n/**\r\n * Main app setup function.\r\n * Initializes players, game controller, and UI.\r\n * Responsible for bootstrapping game state and rendering the grids.\r\n */\r\nfunction App() {\r\n  const { playerBoard, computerBoard } = setupBoards();\r\n  const { player, computer } = setupPlayers(playerBoard, computerBoard);\r\n  const gameController = setupGameController(player, computer);\r\n  const ui = setupUI();\r\n\r\n  ui.createShipPopup(\r\n    player.placeShip.bind(player),\r\n    playerBoard.verifyShipPlacement.bind(playerBoard)\r\n  );\r\n  renderGrids(ui);\r\n\r\n  gameController.playGame(\r\n    ui.getPlayerShipPositions.bind(ui),\r\n    ui.getPlayerAttackPosition.bind(ui),\r\n    ui.displayWinner.bind(ui),\r\n    ui.markCellBasedOnHit.bind(ui),\r\n    App\r\n  );\r\n}\r\n\r\n/**\r\n * Creates and initializes gameboard instances for the player and computer.\r\n *\r\n * @returns {Object} An object containing the player\'s and computer\'s gameboards.\r\n */\r\nfunction setupBoards() {\r\n  const playerBoard = new Gameboard();\r\n  const computerBoard = new Gameboard();\r\n\r\n  return { playerBoard, computerBoard };\r\n}\r\n\r\n/**\r\n * Initializes player-related objects with their gameboards.\r\n *\r\n * @param {Gameboard} playerBoard - Gameboard instance for the human player\r\n * @param {Gameboard} computerBoard - Gameboard instance for the computer player\r\n * @returns {Object} An object containing the player and computer instances.\r\n */\r\nfunction setupPlayers(playerBoard, computerBoard) {\r\n  const player = new Player(playerBoard);\r\n  const computerPlayer = new Player(computerBoard);\r\n  const computer = new Computer(computerPlayer);\r\n\r\n  return { player, computer };\r\n}\r\n\r\n/**\r\n * Creates and initializes the GameController instance.\r\n *\r\n * @returns {GameController} A new GameController object.\r\n */\r\nfunction setupGameController(player, computer) {\r\n  const gameController = new GameController(player, computer);\r\n\r\n  return gameController;\r\n}\r\n\r\n/**\r\n * Creates and initializes the UI instance.\r\n *\r\n * @returns {UI} A new UI object responsible for managing the user interface.\r\n */\r\nfunction setupUI() {\r\n  const ui = new UI();\r\n\r\n  return ui;\r\n}\r\n\r\n/**\r\n * Renders the player and computer grids in the DOM using the provided UI instance.\r\n *\r\n * Uses the default 10x10 Battleship board dimensions defined by the Gameboard class.\r\n * Each grid is populated with cells created by the UI\'s createCell method.\r\n *\r\n * @param {UI} uiInstance - The UI object responsible for DOM manipulation.\r\n */\r\nfunction renderGrids(uiInstance) {\r\n  const defaultGridSetup = {\r\n    row: Gameboard.BOARD_ROWS,\r\n    col: Gameboard.BOARD_COLS,\r\n    createCell: uiInstance.createCell,\r\n  };\r\n\r\n  uiInstance.populateGrid(uiInstance.playerGrid, defaultGridSetup);\r\n  uiInstance.populateGrid(uiInstance.computerGrid, defaultGridSetup);\r\n  uiInstance.addGridClickListeners(uiInstance.computerGrid);\r\n}\r\n\r\n/* harmony default export */ const src_App = (App);\r\n\n;// ./src/index.js\n\r\n\r\n\r\nsrc_App();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RTtBQUN4QjtBQUNBLE9BQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL3N0eWxlcy5jc3M/NDRiMiIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2NsYXNzZXMvU2hpcC5qcz82ZDYxIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvY2xhc3Nlcy9HYW1lYm9hcmQuanM/MmJjNSIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2NsYXNzZXMvVUkuanM/MDIyNyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2NsYXNzZXMvR2FtZUNvbnRyb2xsZXIuanM/ZmI0ZCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2NsYXNzZXMvUGxheWVyLmpzP2Y5MjQiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9jbGFzc2VzL0NvbXB1dGVyLmpzPzQwM2IiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9jbGFzc2VzL2luZGV4LmpzPzRmMzQiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9BcHAuanM/YmU5NCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBzaGlwIGluIHRoZSBCYXR0bGVzaGlwIGdhbWUuXHJcbiAqXHJcbiAqIEVhY2ggc2hpcCBoYXMgYSBuYW1lLCBhIGxlbmd0aCAoYmFzZWQgb24gdGhlIHR5cGUpLCBhbmQgdHJhY2tzXHJcbiAqIGhvdyBtYW55IHRpbWVzIGl0IGhhcyBiZWVuIGhpdC4gVGhlIGNsYXNzIHByb3ZpZGVzIG1ldGhvZHMgdG9cclxuICogcmVnaXN0ZXIgaGl0cywgY2hlY2sgaWYgdGhlIHNoaXAgaXMgc3VuaywgYW5kIGNsb25lIHRoZSBzaGlwIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBTdGF0aWMgcHJvcGVydGllcyBkZWZpbmUgdmFsaWQgc2hpcCBuYW1lcyBhbmQgdGhlaXIgcmVzcGVjdGl2ZSBsZW5ndGhzLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hpcCB7XHJcbiAgc3RhdGljIFZBTElEX05BTUVTID0gW1xyXG4gICAgXCJjYXJyaWVyXCIsXHJcbiAgICBcImJhdHRsZXNoaXBcIixcclxuICAgIFwiY3J1aXNlclwiLFxyXG4gICAgXCJzdWJtYXJpbmVcIixcclxuICAgIFwiZGVzdHJveWVyXCIsXHJcbiAgXTtcclxuXHJcbiAgc3RhdGljIFZBTElEX0xFTkdUSFMgPSB7XHJcbiAgICBjYXJyaWVyOiA1LFxyXG4gICAgYmF0dGxlc2hpcDogNCxcclxuICAgIGNydWlzZXI6IDMsXHJcbiAgICBzdWJtYXJpbmU6IDMsXHJcbiAgICBkZXN0cm95ZXI6IDIsXHJcbiAgfTtcclxuXHJcbiAgI3RpbWVzSGl0ID0gMDtcclxuXHJcbiAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICB9XHJcblxyXG4gIGdldCBuYW1lKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgfVxyXG5cclxuICBzZXQgbmFtZSh2YWx1ZSkge1xyXG4gICAgY29uc3QgbG93ZXJDYXNlVmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgIGlmICghU2hpcC5WQUxJRF9OQU1FUy5pbmNsdWRlcyhsb3dlckNhc2VWYWx1ZSkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgdGhlIHNoaXAgbmFtZSBpcyBpbnZhbGlkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9uYW1lID0gbG93ZXJDYXNlVmFsdWU7XHJcbiAgICB0aGlzLl9sZW5ndGggPSBTaGlwLlZBTElEX0xFTkdUSFNbbG93ZXJDYXNlVmFsdWVdO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGxlbmd0aCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBnZXQgdGltZXNIaXQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4jdGltZXNIaXQ7XHJcbiAgfVxyXG5cclxuICBoaXQoKSB7XHJcbiAgICB0aGlzLiN0aW1lc0hpdCsrO1xyXG4gIH1cclxuXHJcbiAgaXNTdW5rKCkge1xyXG4gICAgaWYgKHRoaXMudGltZXNIaXQgPj0gdGhpcy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbG9uZSBtZXRob2QuXHJcbiAgICpcclxuICAgKiBSZXR1cm5zIGEgZGVlcGx5IGVxdWFsIGNsb25lIG1haW50YWluaW5nIGNsYXNzIGluc3RhbmNlLlxyXG4gICAqXHJcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IEdhbWVib2FyZC5nZXRTaGlwcyB0byByZXR1cm4gY29waWVzIG9mIHNoaXBzLFxyXG4gICAqIGVuc3VyaW5nIGNhbGxlcnMgY2Fubm90IG11dGF0ZSB0aGUgb3JpZ2luYWwgc2hpcHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtTaGlwfSAtIEEgbmV3IFNoaXAgaW5zdGFuY2UgY2xvbmVkIGZyb20gdGhpcyBvbmUuXHJcbiAgICovXHJcbiAgY2xvbmUoKSB7XHJcbiAgICBjb25zdCBzaGlwQ2xvbmUgPSBuZXcgU2hpcCh0aGlzLm5hbWUpO1xyXG4gICAgc2hpcENsb25lLiN0aW1lc0hpdCA9IHRoaXMudGltZXNIaXQ7XHJcblxyXG4gICAgcmV0dXJuIHNoaXBDbG9uZTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vU2hpcFwiO1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgdGhlIEJhdHRsZXNoaXAgZ2FtZWJvYXJkLlxyXG4gKlxyXG4gKiBNYW5hZ2VzIGEgMTB4MTAgZ3JpZCB3aGVyZSBzaGlwcyBhcmUgcGxhY2VkIGFuZCBhdHRhY2tzIGFyZSByZWNvcmRlZC5cclxuICogUHJvdmlkZXMgZnVuY3Rpb25hbGl0eSB0bzpcclxuICogLSBJbml0aWFsaXplIGFuZCByZXNldCB0aGUgZ2FtZWJvYXJkLlxyXG4gKiAtIFBsYWNlIHNoaXBzIHdpdGggdmFsaWRhdGlvbiB0byBhdm9pZCBvdmVybGFwcyBhbmQgb3V0LW9mLWJvdW5kIHBsYWNlbWVudHMuXHJcbiAqIC0gUmVjZWl2ZSBhdHRhY2tzIGFuZCB0cmFjayBoaXRzIG9yIG1pc3Nlcy5cclxuICogLSBSZXBvcnQgb3ZlcmFsbCBzaGlwIHN0YXR1cyAoc3VuayBvciBhZmxvYXQpLlxyXG4gKiAtIEV4cG9zZSBzYWZlLCBkZWVwLWNsb25lZCB2aWV3cyBvZiB0aGUgYm9hcmQgc3RhdGUgdG8gcHJldmVudCBleHRlcm5hbCBtdXRhdGlvbi5cclxuICpcclxuICogRW5jYXBzdWxhdGVzIHByaXZhdGUgZGF0YSBpbmNsdWRpbmcgc2hpcCBwb3NpdGlvbnMsIGF0dGFjayByZWNvcmRzLCBhbmQgc2hpcCBpbnN0YW5jZXMuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lYm9hcmQge1xyXG4gIHN0YXRpYyBCT0FSRF9ST1dTID0gMTA7XHJcbiAgc3RhdGljIEJPQVJEX0NPTFMgPSAxMDtcclxuXHJcbiAgI2dyaWQ7XHJcbiAgI21pc3NlZEF0dGFja3M7XHJcbiAgI2xhbmRlZEF0dGFja3M7XHJcbiAgI3NoaXBzO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuI2dyaWQgPSB0aGlzLmluaXRHYW1lYm9hcmQoKTtcclxuICAgIHRoaXMuI21pc3NlZEF0dGFja3MgPSB7fTtcclxuICAgIHRoaXMuI2xhbmRlZEF0dGFja3MgPSB7fTtcclxuICAgIHRoaXMuI3NoaXBzID0ge307XHJcbiAgfVxyXG5cclxuICBpbml0R2FtZWJvYXJkKCkge1xyXG4gICAgY29uc3QgZ3JpZCA9IEFycmF5KEdhbWVib2FyZC5CT0FSRF9ST1dTKVxyXG4gICAgICAuZmlsbChudWxsKVxyXG4gICAgICAubWFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gQXJyYXkoR2FtZWJvYXJkLkJPQVJEX0NPTFMpLmZpbGwobnVsbCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBncmlkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRCb2FyZCBNZXRob2QuXHJcbiAgICpcclxuICAgKiBSZXNldHMgYWxsIGdhbWVib2FyZCBwcm9wZXJ0aWVzIHRvIGRlZmF1bHQgdmFsdWVzLlxyXG4gICAqL1xyXG4gIHJlc2V0Qm9hcmQoKSB7XHJcbiAgICB0aGlzLiNncmlkID0gdGhpcy5pbml0R2FtZWJvYXJkKCk7XHJcbiAgICB0aGlzLiNtaXNzZWRBdHRhY2tzID0ge307XHJcbiAgICB0aGlzLiNsYW5kZWRBdHRhY2tzID0ge307XHJcbiAgICB0aGlzLiNzaGlwcyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSXNWYWxpZENvb3JkaW5hdGUgbWV0aG9kLlxyXG4gICAqXHJcbiAgICogQ2hlY2tzIHdoZXRoZXIgYSBjb29yZGluYXRlIGV4aXN0cyB3aXRoaW4gdGhlIGdyaWQuXHJcbiAgICovXHJcbiAgaXNWYWxpZENvb3JkaW5hdGUocm93LCBjb2x1bW4pIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHR5cGVvZiByb3cgPT09IFwibnVtYmVyXCIgJiZcclxuICAgICAgdHlwZW9mIGNvbHVtbiA9PT0gXCJudW1iZXJcIiAmJlxyXG4gICAgICByb3cgPj0gMCAmJlxyXG4gICAgICBjb2x1bW4gPj0gMCAmJlxyXG4gICAgICBjb2x1bW4gPCBHYW1lYm9hcmQuQk9BUkRfQ09MUyAmJlxyXG4gICAgICByb3cgPCBHYW1lYm9hcmQuQk9BUkRfUk9XU1xyXG4gICAgKTtcclxuICB9XHJcbiAgLy9cclxuXHJcbiAgLyoqXHJcbiAgICogUGxhY2VTaGlwIG1ldGhvZC5cclxuICAgKlxyXG4gICAqIFBsYWNlcyBhIHNoaXAgb24gdGhlIGJvYXJkIHByb3BlcnR5IHdpdGhpbiB0aGUgZ2FtZWJvYXJkIGluc3RhbmNlIGFuZFxyXG4gICAqICBhZGRzIHRoZW0gdG8gdGhlIHNoaXBzIGRpY3Rpb25hcnkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uIC0gU3RhcnRpbmcgY29sdW1uICh4LWNvb3JkaW5hdGUpXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvdyAtIFN0YXJ0aW5nIHJvdyAoeS1jb29yZGluYXRlKVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBMZW5ndGggb2YgdGhlIHNoaXBcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hpcE5hbWUgLSBOYW1lIG9mIHRoZSBzaGlwXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpcmVjdGlvbiAtIEhvcml6b250YWwgb3IgdmVydGljYWwgcGxhY2VtZW50XHJcbiAgICogQHJldHVybiB7Ym9vbH0gLSBUcnVlIG9uIHN1Y2Nlc3MsIGVsc2UgZmFsc2UuXHJcbiAgICovXHJcblxyXG4gIHBsYWNlU2hpcChyb3csIGNvbHVtbiwgc2hpcE5hbWUsIGRpcmVjdGlvbiA9IFwiaG9yaXpvbnRhbFwiKSB7XHJcbiAgICBjb25zdCBsZW5ndGggPSBTaGlwLlZBTElEX0xFTkdUSFNbc2hpcE5hbWVdO1xyXG5cclxuICAgIGNvbnN0IGlzVmFsaWQgPSB0aGlzLnZlcmlmeVNoaXBQbGFjZW1lbnQoXHJcbiAgICAgIHJvdyxcclxuICAgICAgY29sdW1uLFxyXG4gICAgICBzaGlwTmFtZSxcclxuICAgICAgZGlyZWN0aW9uLFxyXG4gICAgICBsZW5ndGhcclxuICAgICk7XHJcblxyXG4gICAgaWYgKCFpc1ZhbGlkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc2hpcCA9IG5ldyBTaGlwKHNoaXBOYW1lKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChkaXJlY3Rpb24udG9Mb3dlckNhc2UoKSA9PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgIHRoaXMuI2dyaWRbcm93XVtjb2x1bW4gKyBpXSA9IHNoaXA7XHJcbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uLnRvTG93ZXJDYXNlKCkgPT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgdGhpcy4jZ3JpZFtyb3cgKyBpXVtjb2x1bW5dID0gc2hpcDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuI3NoaXBzW3NoaXBOYW1lXSA9IHNoaXA7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWZXJpZnlTaGlwUGxhY2VtZW50IEhlbHBlciBNZXRob2QuXHJcbiAgICpcclxuICAgKiBWZXJpZmllcyBhIHNoaXAgY2FuIGJlIHBsYWNlZCBvbiB0aGUgZ2FtZWJvYXJkIGNvcnJlY3RseS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb3cgLSBTdGFydGluZyByb3cgKHktY29vcmRpbmF0ZSlcclxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uIC0gU3RhcnRpbmcgY29sdW1uICh4LWNvb3JkaW5hdGUpXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIExlbmd0aCBvZiB0aGUgc2hpcFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaGlwTmFtZSAtIE5hbWUgb2YgdGhlIHNoaXBcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGlyZWN0aW9uIC0gSG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwbGFjZW1lbnRcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGVuZ3RoIC0gTGVuZ3RoIG9mIHNoaXBcclxuICAgKiBAcmV0dXJuIHtib29sfSAtIFRydWUgb24gc3VjY2VzcywgZWxzZSBmYWxzZVxyXG4gICAqL1xyXG4gIHZlcmlmeVNoaXBQbGFjZW1lbnQocm93LCBjb2x1bW4sIHNoaXBOYW1lLCBkaXJlY3Rpb24sIGxlbmd0aCkge1xyXG4gICAgY29uc3QgZGlyID0gZGlyZWN0aW9uLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBob3Jpem9udGFsU3BhY2VMZWZ0ID0gR2FtZWJvYXJkLkJPQVJEX0NPTFMgLSBjb2x1bW47XHJcbiAgICBjb25zdCB2ZXJ0aWNhbFNwYWNlTGVmdCA9IEdhbWVib2FyZC5CT0FSRF9ST1dTIC0gcm93O1xyXG5cclxuICAgIGlmIChsZW5ndGggIT09IFNoaXAuVkFMSURfTEVOR1RIU1tzaGlwTmFtZV0pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igc2hpcCBsZW5ndGggZG9lcyBub3QgbWF0Y2hcIik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLmlzVmFsaWRDb29yZGluYXRlKHJvdywgY29sdW1uKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgYFRoZSBzaGlwIGhhcyBiZWVuIHBsYWNlZCBpbiBhbiBvdXQgb2YgYm91bmRzIHBvc2l0aW9uOiBSb3c6JHtyb3d9IENvbDoke2NvbHVtbn1gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRpciAhPT0gXCJob3Jpem9udGFsXCIgJiYgZGlyICE9PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgIFwiRXJyb3IgYW4gaW52YWxpZCBkaXJlY3Rpb24gaGFzIGJlZW4gcGFzc2VkIHRvIHBsYWNlU2hpcFwiXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFTaGlwLlZBTElEX05BTUVTLmluY2x1ZGVzKHNoaXBOYW1lKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc2hpcCBuYW1lIHBhc3NlZCBhcyBhbiBhcnVnbWVudCBpcyBpbnZhbGlkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHBlY3RlZCBGYWlsdXJlc1xyXG5cclxuICAgIGlmIChcclxuICAgICAgKGRpciA9PT0gXCJob3Jpem9udGFsXCIgJiYgbGVuZ3RoID4gaG9yaXpvbnRhbFNwYWNlTGVmdCkgfHxcclxuICAgICAgKGRpciA9PT0gXCJ2ZXJ0aWNhbFwiICYmIGxlbmd0aCA+IHZlcnRpY2FsU3BhY2VMZWZ0KVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIb3Jpem9udGFsIG92ZXJsYXBcclxuICAgIGlmIChkaXIgPT09IFwiaG9yaXpvbnRhbFwiKSB7XHJcbiAgICAgIGZvciAobGV0IGMgPSBjb2x1bW47IGMgPCBjb2x1bW4gKyBsZW5ndGg7IGMrKykge1xyXG4gICAgICAgIGlmICh0aGlzLiNncmlkW3Jvd11bY10gIT09IG51bGwpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gUG9zaXRpb24gYWxyZWFkeSBvY2N1cGllZFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gdmVydGljYWxcclxuICAgICAgZm9yIChsZXQgciA9IHJvdzsgciA8IHJvdyArIGxlbmd0aDsgcisrKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuI2dyaWRbcl1bY29sdW1uXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBQb3NpdGlvbiBhbHJlYWR5IG9jY3VwaWVkXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWNlaXZlQXR0YWNrIG1ldGhvZC5cclxuICAgKlxyXG4gICAqIFRha2VzIGEgcGFpciBvZiBjb29yZGluYXRlcyBhbmQgZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdFxyXG4gICAqIGEgc2hpcCBoYXMgYmVlbiBoaXQuXHJcbiAgICpcclxuICAgKiBIYXMgdGhlIGhpdCBzaGlwIGNhbGwgdGhlIGhpdCBmdW5jdGlvbiBvciByZWNvcmRzXHJcbiAgICogdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBtaXNzZWQgc2hvdCB0byBwcmV2ZW50IHJlcGVhdCBhdHRhY2tzLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbiAtIFN0YXJ0aW5nIGNvbHVtbiAoeC1jb29yZGluYXRlKVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb3cgLSBTdGFydGluZyByb3cgKHktY29vcmRpbmF0ZSlcclxuICAgKiBAcmV0dXJuIHtib29sfSAtIFJldHVybnMgdHJ1ZSBpZiBhIHNoaXAgaGFzIGJlZW4gaGl0XHJcbiAgICovXHJcbiAgcmVjZWl2ZUF0dGFjayhyb3csIGNvbHVtbikge1xyXG4gICAgY29uc3Qga2V5ID0gYCR7cm93fSwke2NvbHVtbn1gO1xyXG5cclxuICAgIGlmICghdGhpcy5pc1ZhbGlkQ29vcmRpbmF0ZShyb3csIGNvbHVtbikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgIGBJbnZhbGlkIGNvb3JkaW5hdGU6ICgke3Jvd30sICR7Y29sdW1ufSkgaXMgb3V0c2lkZSB0aGUgYm9hcmQgYm91bmRzLmBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhbHJlYWR5QXR0YWNrZWQgPVxyXG4gICAgICB0aGlzLiNsYW5kZWRBdHRhY2tzW2tleV0gfHwgdGhpcy4jbWlzc2VkQXR0YWNrc1trZXldO1xyXG5cclxuICAgIGlmIChhbHJlYWR5QXR0YWNrZWQpIHJldHVybiBudWxsO1xyXG5cclxuICAgIGlmICh0aGlzLiNncmlkW3Jvd11bY29sdW1uXSAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLiNncmlkW3Jvd11bY29sdW1uXS5oaXQoKTtcclxuICAgICAgdGhpcy4jbGFuZGVkQXR0YWNrc1trZXldID0gdHJ1ZTtcclxuICAgICAgLy8gY29uc29sZS5sb2codGhpcy5zaGlwcyk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy4jbWlzc2VkQXR0YWNrc1trZXldID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVwb3J0U2hpcFN0YXR1cyBtZXRob2QuXHJcbiAgICpcclxuICAgKiBSZXBvcnRzIHdoZXRoZXIgb3Igbm90IGFsbCBvZiB0aGVpciBzaGlwcyBoYXZlIGJlZW4gc3Vuay5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIGlmIGFsbCBzaGlwcyBoYXZlIGJlZW4gc3VuaywgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAqL1xyXG4gIHJlcG9ydFNoaXBTdGF0dXMoKSB7XHJcbiAgICBjb25zdCBzaGlwcyA9IHRoaXMuc2hpcHM7IC8vIGNhbGxzIGdldHRlciB3aGljaCByZXR1cm5zIGNsb25lZCBzaGlwcyBhcnJheVxyXG5cclxuICAgIGlmIChzaGlwcy5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBmb3IgKGxldCBzaGlwIG9mIHNoaXBzKSB7XHJcbiAgICAgIGlmICghc2hpcC5pc1N1bmsoKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXR0ZXIgZm9yIHRoZSBncmlkLlxyXG4gICAqXHJcbiAgICogUmV0dXJucyBhIGRlZXAgY2xvbmUgb2YgdGhlIHByaXZhdGUgI2dyaWQgcHJvcGVydHkuXHJcbiAgICogRWFjaCBlbGVtZW50IGluIHRoZSBncmlkIGlzIGNsb25lZCB0byBwcmV2ZW50IGV4dGVybmFsIG11dGF0aW9uLlxyXG4gICAqIC0gSWYgdGhlIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgU2hpcCwgaXQgdXNlcyB0aGUgU2hpcCdzIGNsb25lIG1ldGhvZC5cclxuICAgKiAtIE90aGVyd2lzZSwgaXQgdXNlcyBzdHJ1Y3R1cmVkQ2xvbmUgdG8gZGVlcCBjbG9uZSB0aGUgZWxlbWVudC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtBcnJheTxBcnJheTxPYmplY3R8bnVsbD4+fSBEZWVwIGNsb25lIG9mIHRoZSBncmlkLlxyXG4gICAqL1xyXG4gIGdldCBncmlkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuI2dyaWQubWFwKChyb3cpID0+IHtcclxuICAgICAgcmV0dXJuIHJvdy5tYXAoKGNvbCkgPT4ge1xyXG4gICAgICAgIGlmIChjb2wgIT0gbnVsbCAmJiBjb2wgaW5zdGFuY2VvZiBTaGlwKSByZXR1cm4gY29sLmNsb25lKCk7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gc3RydWN0dXJlZENsb25lKGNvbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0IHNoaXBzIEdldHRlci5cclxuICAgKlxyXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgZGVlcGx5IGNsb25lZCBzaGlwIG9iamVjdHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtBcnJheTxvYmplY3RzPn0gLSBBcnJheSBvZiBjbG9uZWQgc2hpcHMuXHJcbiAgICovXHJcbiAgZ2V0IHNoaXBzKCkge1xyXG4gICAgaWYgKCF0aGlzLiNzaGlwcykge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLiNzaGlwcykubWFwKChzaGlwKSA9PiBzaGlwLmNsb25lKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0IG1pc3NlZEF0dGFja3MgR2V0dGVyLlxyXG4gICAqXHJcbiAgICogUmV0dXJucyBhIGRlZXAgY2xvbmUgZGljdGlvbmFyeSBjb250YWluaW5nIHRoZSBtaXNzZWQgYXR0YWNrcy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtEaWN0aW9uYXJ5fSAtIERlZXAgY2xvbmUgb2YgbWlzc2VkIGF0dGFja3MuXHJcbiAgICovXHJcbiAgZ2V0IG1pc3NlZEF0dGFja3MoKSB7XHJcbiAgICByZXR1cm4gc3RydWN0dXJlZENsb25lKHRoaXMuI21pc3NlZEF0dGFja3MpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0IGxhbmRlZEF0dGFja3MgR2V0dGVyLlxyXG4gICAqXHJcbiAgICogUmV0dXJucyBhIGRlZXAgaW1tdXRhYmxlIGNsb25lIG9mIHRoZSAjbGFuZGVkQXR0YWNrcyBkaWN0aW9uYXJ5LlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0RpY3Rpb25hcnl9IC0gRGVlcCBjbG9uZSBvZiBsYW5kZWQgYXR0YWNrcy5cclxuICAgKi9cclxuICBnZXQgbGFuZGVkQXR0YWNrcygpIHtcclxuICAgIHJldHVybiBzdHJ1Y3R1cmVkQ2xvbmUodGhpcy4jbGFuZGVkQXR0YWNrcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRTaGlwQXQgTWV0aG9kLlxyXG4gICAqXHJcbiAgICogUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgc2hpcCBhdCBhIHNwZWNpZmljIGluZGV4XHJcbiAgICogd2l0aGluIHRoZSBncmlkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1NoaXB9IC0gU2hpcCBSZWZlcmVuY2VcclxuICAgKi9cclxuICBnZXRTaGlwQXQocm93LCBjb2wpIHtcclxuICAgIHJldHVybiB0aGlzLiNncmlkW3Jvd11bY29sXTtcclxuICB9XHJcblxyXG4gIHByaW50R3JpZCgpIHtcclxuICAgIGxldCBncmlkU3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBHYW1lYm9hcmQuQk9BUkRfUk9XUzsgcm93KyspIHtcclxuICAgICAgbGV0IHJvd1N0cmluZyA9IFwiXCI7XHJcbiAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IEdhbWVib2FyZC5CT0FSRF9DT0xTOyBjb2wrKykge1xyXG4gICAgICAgIGNvbnN0IHNoaXAgPSB0aGlzLiNncmlkW3Jvd11bY29sXTtcclxuICAgICAgICBpZiAoc2hpcCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgcm93U3RyaW5nICs9IFwiUyBcIjsgLy8gTWFyayBhcyBwYXJ0IG9mIGEgc2hpcFxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByb3dTdHJpbmcgKz0gXCJ+IFwiOyAvLyBFbXB0eSBzcGFjZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBncmlkU3RyaW5nICs9IHJvd1N0cmluZy50cmltKCkgKyBcIlxcblwiO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGdyaWRTdHJpbmcpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgU2hpcCBmcm9tIFwiLi9TaGlwXCI7XHJcbmltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4vR2FtZWJvYXJkXCI7XHJcblxyXG4vKipcclxuICogVUkgY2xhc3MgbWFuYWdlcyB0aGUgdXNlciBpbnRlcmZhY2UgZm9yIHRoZSBCYXR0bGVzaGlwIGdhbWUuXHJcbiAqXHJcbiAqIEl0IGhhbmRsZXMgcmVuZGVyaW5nIGFuZCBpbnRlcmFjdGluZyB3aXRoIHRoZSBwbGF5ZXIgYW5kIGNvbXB1dGVyIGdyaWRzLFxyXG4gKiB0cmFja2luZyBzaGlwIHBsYWNlbWVudCBhbmQgYXR0YWNrIHBvc2l0aW9ucywgYW5kIG1hbmFnaW5nIHBvcHVwIG1vZGFsc1xyXG4gKiBzdWNoIGFzIHNoaXAgcGxhY2VtZW50IHByb21wdHMgYW5kIHdpbm5lciBhbm5vdW5jZW1lbnRzLlxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBwcml2YXRlIHN0YXRlIHJlbGF0ZWQgdG8gc2hpcCBwbGFjZW1lbnQgYW5kIGF0dGFja3MsXHJcbiAqIHByb3ZpZGVzIG1ldGhvZHMgdG8gcG9wdWxhdGUgZ3JpZHMsIGFkZCBldmVudCBsaXN0ZW5lcnMgZm9yIHVzZXIgYWN0aW9ucyxcclxuICogYW5kIHVwZGF0ZSB0aGUgVUkgYmFzZWQgb24gZ2FtZSBzdGF0ZSBjaGFuZ2VzLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUkge1xyXG4gICNjdXJyZW50U2hpcEluZGV4O1xyXG4gICNzaGlwUGxhY2VtZW50T3JpZW50YXRpb247XHJcbiAgI3BsYXllclNoaXBQb3NpdGlvbnM7XHJcbiAgI3BsYXllckF0dGFja1Bvc2l0aW9uO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucGxheWVyR3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGxheWVyLWdyaWRcIik7XHJcbiAgICB0aGlzLmNvbXB1dGVyR3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29tcHV0ZXItZ3JpZFwiKTtcclxuXHJcbiAgICB0aGlzLiNjdXJyZW50U2hpcEluZGV4ID0gMDtcclxuICAgIHRoaXMuc2hpcHNUb1BsYWNlID0gWy4uLlNoaXAuVkFMSURfTkFNRVNdO1xyXG5cclxuICAgIHRoaXMuY2VsbEhpZ2hsaWdodENvdW50ID0gNTtcclxuICAgIHRoaXMuI3NoaXBQbGFjZW1lbnRPcmllbnRhdGlvbiA9IFwiaG9yaXpvbnRhbFwiO1xyXG5cclxuICAgIHRoaXMuI3BsYXllclNoaXBQb3NpdGlvbnMgPSBbXTtcclxuXHJcbiAgICB0aGlzLiNwbGF5ZXJBdHRhY2tQb3NpdGlvbiA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWNvcmRzIHRoZSBwbGF5ZXIncyBhdHRhY2sgcG9zaXRpb24gb24gdGhlIGdyaWQuXHJcbiAgICpcclxuICAgKiBUaGlzIG1ldGhvZCBzdG9yZXMgdGhlIGdpdmVuIGByb3dgIGFuZCBgY29sYCBhcyB0aGUgcGxheWVyJ3MgbW9zdCByZWNlbnQgYXR0YWNrIHBvc2l0aW9uLlxyXG4gICAqIEl0IHVzZXMgYSBwcml2YXRlIGZpZWxkIChgI3BsYXllckF0dGFja1Bvc2l0aW9uYCkgdG8gZW5zdXJlIHRoYXQgdGhlIGF0dGFjayBwb3NpdGlvblxyXG4gICAqIGlzIGVuY2Fwc3VsYXRlZCBhbmQgY2Fubm90IGJlIGFjY2Vzc2VkIGRpcmVjdGx5IGZyb20gb3V0c2lkZSB0aGUgY2xhc3MuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gcm93IC0gVGhlIHJvdyBpbmRleCBvZiB0aGUgYXR0YWNrIHBvc2l0aW9uIG9uIHRoZSBncmlkLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2wgLSBUaGUgY29sdW1uIGluZGV4IG9mIHRoZSBhdHRhY2sgcG9zaXRpb24gb24gdGhlIGdyaWQuXHJcbiAgICovXHJcbiAgcmVjb3JkUGxheWVyQXR0YWNrKHJvdywgY29sKSB7XHJcbiAgICB0aGlzLiNwbGF5ZXJBdHRhY2tQb3NpdGlvbiA9IHsgcm93LCBjb2wgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlY29yZHMgdGhlIHBvc2l0aW9uLCBzaGlwIG5hbWUsIGFuZCBkaXJlY3Rpb24gb2YgYSBzaGlwIHBsYWNlbWVudC5cclxuICAgKlxyXG4gICAqIEFzc3VtZXMgdGhhdCBgdGhpcy5jdXJyZW50U2hpcGAgYW5kIGB0aGlzLnNoaXBQbGFjZW1lbnRPcmllbnRhdGlvbmAgYXJlXHJcbiAgICogYWxyZWFkeSBzZXQgYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2QuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gcm93IC0gVGhlIHJvdyBjb29yZGluYXRlIG9mIHRoZSBzaGlwIHBsYWNlbWVudC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sIC0gVGhlIGNvbHVtbiBjb29yZGluYXRlIG9mIHRoZSBzaGlwIHBsYWNlbWVudC5cclxuICAgKi9cclxuICByZWNvcmRTaGlwUG9zaXRpb24ocm93LCBjb2wpIHtcclxuICAgIGNvbnN0IHNoaXBQb3NpdGlvbiA9IHtcclxuICAgICAgcm93LFxyXG4gICAgICBjb2wsXHJcbiAgICAgIHNoaXBOYW1lOiB0aGlzLmN1cnJlbnRTaGlwLFxyXG4gICAgICBkaXJlY3Rpb246IHRoaXMuc2hpcFBsYWNlbWVudE9yaWVudGF0aW9uLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLiNwbGF5ZXJTaGlwUG9zaXRpb25zLnB1c2goc2hpcFBvc2l0aW9uKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkdmFuY2VzIHRvIHRoZSBuZXh0IHNoaXAgaW4gdGhlIHBsYWNlbWVudCBzZXF1ZW5jZS5cclxuICAgKiBVcGRhdGVzIHRoZSBVSSBwcm9tcHQgdG8gaW5kaWNhdGUgdGhlIG5leHQgc2hpcCB0byBiZSBwbGFjZWQuXHJcbiAgICogUmVzZXRzIHRoZSBjZWxsIGhpZ2hsaWdodCBjb3VudCBiYXNlZCBvbiB0aGUgbGVuZ3RoIG9mIHRoZSBjdXJyZW50IHNoaXAuXHJcbiAgICogSWYgYWxsIHNoaXBzIGhhdmUgYmVlbiBwbGFjZWQsIHNldHMgdGhlIGN1cnJlbnQgc2hpcCBpbmRleCB0byBudWxsIGFuZCByZXNldHMgaGlnaGxpZ2h0IGNvdW50LlxyXG4gICAqL1xyXG4gIGFkdmFuY2VUb05leHRTaGlwKCkge1xyXG4gICAgY29uc3Qgc2hpcFNlbGVjdGlvbkRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2hpcFNlbGVjdGlvblwiKTtcclxuXHJcbiAgICB0aGlzLiNjdXJyZW50U2hpcEluZGV4Kys7XHJcblxyXG4gICAgaWYgKHNoaXBTZWxlY3Rpb25EaXYpIHtcclxuICAgICAgc2hpcFNlbGVjdGlvbkRpdi50ZXh0Q29udGVudCA9IGBQbGFjZSB5b3VyICR7dGhpcy5jdXJyZW50U2hpcH1gO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2VsbEhpZ2hsaWdodENvdW50ID0gU2hpcC5WQUxJRF9MRU5HVEhTW3RoaXMuY3VycmVudFNoaXBdO1xyXG5cclxuICAgIGlmICh0aGlzLiNjdXJyZW50U2hpcEluZGV4ID49IHRoaXMuc2hpcHNUb1BsYWNlLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLiNjdXJyZW50U2hpcEluZGV4ID0gbnVsbDsgLy8gU2V0cyB0byBudWxsIGF0IGVuZFxyXG4gICAgICB0aGlzLmNlbGxIaWdobGlnaHRDb3VudCA9IDE7XHJcblxyXG4gICAgICB0aGlzLmNsb3NlU2hpcFBvcHVwKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbG9zZXMgdGhlIHNoaXAgcGxhY2VtZW50IHBvcHVwIGJ5IGhpZGluZyBpdHMgb3ZlcmxheSBlbGVtZW50LlxyXG4gICAqIFNldHMgdGhlIGRpc3BsYXkgc3R5bGUgb2YgdGhlIHBvcHVwIGVsZW1lbnQgd2l0aCBJRCBcInBsYWNlU2hpcE92ZXJsYXlcIiB0byBcIm5vbmVcIi5cclxuICAgKi9cclxuICBjbG9zZVNoaXBQb3B1cCgpIHtcclxuICAgIGNvbnN0IHBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwbGFjZVNoaXBPdmVybGF5XCIpO1xyXG5cclxuICAgIGlmIChwb3B1cCkge1xyXG4gICAgICBwbGFjZVNoaXBPdmVybGF5LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFBsYXllckF0dGFja1Bvc2l0aW9uKCkge1xyXG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLiNwbGF5ZXJBdHRhY2tQb3NpdGlvbjtcclxuICAgIHRoaXMuI3BsYXllckF0dGFja1Bvc2l0aW9uID0gbnVsbDtcclxuXHJcbiAgICByZXR1cm4gcG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBnZXRQbGF5ZXJTaGlwUG9zaXRpb25zKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuI3BsYXllclNoaXBQb3NpdGlvbnM7XHJcbiAgfVxyXG5cclxuICBnZXQgcGxheWVyQXR0YWNrUG9zaXRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy4jcGxheWVyQXR0YWNrUG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBnZXQgcGxheWVyU2hpcFBvc2l0aW9ucygpIHtcclxuICAgIHJldHVybiB0aGlzLiNwbGF5ZXJTaGlwUG9zaXRpb25zO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGN1cnJlbnRTaGlwSW5kZXgoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4jY3VycmVudFNoaXBJbmRleDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIHNoaXAgY3VycmVudGx5IGJlaW5nIHBsYWNlZC5cclxuICAgKiBJZiBhbGwgc2hpcHMgaGF2ZSBiZWVuIHBsYWNlZCwgcmV0dXJucyBudWxsLlxyXG4gICAqL1xyXG4gIGdldCBjdXJyZW50U2hpcCgpIHtcclxuICAgIHJldHVybiB0aGlzLnNoaXBzVG9QbGFjZVt0aGlzLiNjdXJyZW50U2hpcEluZGV4XSB8fCBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNoaXBQbGFjZW1lbnRPcmllbnRhdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLiNzaGlwUGxhY2VtZW50T3JpZW50YXRpb247XHJcbiAgfVxyXG5cclxuICBzZXQgc2hpcFBsYWNlbWVudE9yaWVudGF0aW9uKG9yaWVudGF0aW9uKSB7XHJcbiAgICBpZiAob3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiIHx8IG9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgdGhpcy4jc2hpcFBsYWNlbWVudE9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG9yaWVudGF0aW9uXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUG9wdWxhdGVzIGEgY29udGFpbmVyIGVsZW1lbnQgd2l0aCBhIGdyaWQgb2YgZWxlbWVudHMuPVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZ3JpZENvbnRhaW5lciAtIFRoZSBET00gZWxlbWVudCB0byB3aGljaCB0aGUgZ3JpZCByb3dzIHdpbGwgYmUgYXBwZW5kZWQuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBncmlkLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLnJvdyAtIFRoZSBudW1iZXIgb2Ygcm93cyB0byBjcmVhdGUuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMuY29sIC0gVGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIGNyZWF0ZSBwZXIgcm93LlxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24obnVtYmVyLCBudW1iZXIpOiBIVE1MRWxlbWVudH0gb3B0aW9ucy5jcmVhdGVDZWxsIC1cclxuICAgKiAgICAgICAgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjZWxsIGVsZW1lbnQgZ2l2ZW4gdGhlIHJvdyBhbmQgY29sdW1uIGluZGljZXMuXHJcbiAgICovXHJcbiAgcG9wdWxhdGVHcmlkKFxyXG4gICAgZ3JpZENvbnRhaW5lcixcclxuICAgIHsgcm93OiByb3dzLCBjb2w6IGNvbHMsIGNyZWF0ZUNlbGw6IGNyZWF0ZUNlbGwgfVxyXG4gICkge1xyXG4gICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgcm93czsgcm93KyspIHtcclxuICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgY29sczsgY29sKyspIHtcclxuICAgICAgICBjb25zdCBjZWxsID0gY3JlYXRlQ2VsbChyb3csIGNvbCk7XHJcbiAgICAgICAgZ3JpZENvbnRhaW5lci5hcHBlbmQoY2VsbCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBncmlkIGNlbGwgZWxlbWVudCB3aXRoIHJvdyBhbmQgY29sdW1uIGRhdGEgYXR0cmlidXRlcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb3cgLSBUaGUgcm93IGluZGV4IG9mIHRoZSBjZWxsLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2wgLSBUaGUgY29sdW1uIGluZGV4IG9mIHRoZSBjZWxsLlxyXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gQSBkaXYgZWxlbWVudCByZXByZXNlbnRpbmcgYSBncmlkIGNlbGwsXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgIHdpdGggZGF0YXNldCBhdHRyaWJ1dGVzIGZvciByb3cgYW5kIGNvbHVtbixcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgYW5kIGEgQ1NTIGNsYXNzIFwiZ3JpZC1jZWxsXCIgYXBwbGllZC5cclxuICAgKi9cclxuICBjcmVhdGVDZWxsKHJvdywgY29sKSB7XHJcbiAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgICBjZWxsLmRhdGFzZXQucm93ID0gcm93O1xyXG4gICAgY2VsbC5kYXRhc2V0LmNvbCA9IGNvbDtcclxuICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImdyaWQtY2VsbFwiKTtcclxuXHJcbiAgICByZXR1cm4gY2VsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgY2xpY2sgZXZlbnQgbGlzdGVuZXJzIHRvIGFsbCBjZWxscyBpbiBhIGdyaWQuXHJcbiAgICogQXR0YXRjaGVzIGhhbmRsZXJzIGRlcGVuaW5nIG9uIGdyaWQgaWQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBncmlkQ29udGFpbmVyIC0gVGhlIGdyaWQgRE9NIGVsZW1lbnQuXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdmVyaWZ5U2hpcFBsYWNlbWVudEZuIC0gRGVwZW5kZW5jeSBJbmplY3Rpb24uXHJcbiAgICovXHJcbiAgYWRkR3JpZENsaWNrTGlzdGVuZXJzKGdyaWRDb250YWluZXIsIHZlcmlmeVNoaXBQbGFjZW1lbnRGbikge1xyXG4gICAgY29uc3QgaXNTaGlwUGxhY2VtZW50R3JpZCA9IGdyaWRDb250YWluZXIuaWQgPT09IFwic2hpcFBsYWNlbWVudFwiO1xyXG4gICAgY29uc3QgaXNPcHBvbmVudEdyaWQgPSBncmlkQ29udGFpbmVyLmlkID09PSBcImNvbXB1dGVyLWdyaWRcIjtcclxuXHJcbiAgICBpZiAoIWlzU2hpcFBsYWNlbWVudEdyaWQgJiYgIWlzT3Bwb25lbnRHcmlkKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgaGFuZGxlciA9IGlzU2hpcFBsYWNlbWVudEdyaWRcclxuICAgICAgPyB0aGlzLmhhbmRsZVJlY29yZFNoaXBDbGljay5iaW5kKHRoaXMpXHJcbiAgICAgIDogdGhpcy5oYW5kbGVSZWNvcmRBdHRhY2tDbGljay5iaW5kKHRoaXMpO1xyXG5cclxuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IEdhbWVib2FyZC5CT0FSRF9ST1dTOyByb3crKykge1xyXG4gICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBHYW1lYm9hcmQuQk9BUkRfQ09MUzsgY29sKyspIHtcclxuICAgICAgICBjb25zdCBjZWxsID0gdGhpcy5nZXRDZWxsKGdyaWRDb250YWluZXIsIHJvdywgY29sKTtcclxuXHJcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgaGFuZGxlcihyb3csIGNvbCwgdmVyaWZ5U2hpcFBsYWNlbWVudEZuKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlcyBhIHNpbmdsZSBjbGljayBldmVudCBmb3IgcGxhY2luZyBhIHNoaXAgb24gdGhlIGdhbWVib2FyZC5cclxuICAgKiBWZXJpZmllcyB0aGUgcGxhY2VtZW50LCByZWNvcmRzIHRoZSBzaGlwIHBvc2l0aW9uIGlmIHZhbGlkLCBhbmQgYWR2YW5jZXMgdG8gdGhlIG5leHQgc2hpcC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb3cgLSBUaGUgcm93IGluZGV4IG9mIHRoZSBjbGlja2VkIGNlbGwuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbCAtIFRoZSBjb2x1bW4gaW5kZXggb2YgdGhlIGNsaWNrZWQgY2VsbC5cclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB2ZXJpZnlTaGlwUGxhY2VtZW50Rm4gLSBGdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgc2hpcCBjYW4gYmUgcGxhY2VkIGF0IHRoZSBnaXZlbiBsb2NhdGlvbi5cclxuICAgKi9cclxuICBoYW5kbGVSZWNvcmRTaGlwQ2xpY2socm93LCBjb2wsIHZlcmlmeVNoaXBQbGFjZW1lbnRGbikge1xyXG4gICAgY29uc3QgaXNWYWxpZFBsYWNlbWVudCA9IHZlcmlmeVNoaXBQbGFjZW1lbnRGbihcclxuICAgICAgcm93LFxyXG4gICAgICBjb2wsXHJcbiAgICAgIHRoaXMuY3VycmVudFNoaXAsXHJcbiAgICAgIHRoaXMuc2hpcFBsYWNlbWVudE9yaWVudGF0aW9uLFxyXG4gICAgICBTaGlwLlZBTElEX0xFTkdUSFNbdGhpcy5jdXJyZW50U2hpcF1cclxuICAgICk7XHJcblxyXG4gICAgaWYgKCFpc1ZhbGlkUGxhY2VtZW50KSByZXR1cm47XHJcblxyXG4gICAgdGhpcy5yZWNvcmRTaGlwUG9zaXRpb24ocm93LCBjb2wpO1xyXG5cclxuICAgIHRoaXMubWFya0NlbGxzQXNQbGFjZWQocm93LCBjb2wpO1xyXG4gICAgdGhpcy5hZHZhbmNlVG9OZXh0U2hpcCgpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlUmVjb3JkQXR0YWNrQ2xpY2socm93LCBjb2wpIHtcclxuICAgIHRoaXMucmVjb3JkUGxheWVyQXR0YWNrKHJvdywgY29sKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgYSAnaGl0JyBvciAnbWlzcycgY2xhc3MgdG8gYSBncmlkIGNlbGwgYmFzZWQgb24gYXR0YWNrIHJlc3VsdC5cclxuICAgKlxyXG4gICAqIFNlbGVjdHMgdGhlIHBsYXllcidzIG9yIGNvbXB1dGVyJ3MgZ3JpZCBkZXBlbmRpbmcgb24gYGN1cnJlbnRUdXJuYCwgdGhlblxyXG4gICAqIG1hcmtzIHRoZSBjZWxsIGF0IChgcm93YCwgYGNvbGApIGFzIGhpdCBvciBtaXNzLiBJZiB0aGUgY2VsbCBkb2Vzbid0IGV4aXN0LCBkb2VzIG5vdGhpbmcuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gcm93IC0gUm93IGluZGV4IG9mIHRoZSB0YXJnZXQgY2VsbC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sIC0gQ29sdW1uIGluZGV4IG9mIHRoZSB0YXJnZXQgY2VsbC5cclxuICAgKiBAcGFyYW0geydwbGF5ZXInfCdjb21wdXRlcid9IGN1cnJlbnRUdXJuIC0gV2hvc2UgZ3JpZCB0byB1cGRhdGUuXHJcbiAgICogQHBhcmFtIHtib29sZWFuIHwgbnVsbH0gaXNIaXQgLSBUcnVlIGlmIGF0dGFjayB3YXMgYSBoaXQ7IGZhbHNlIGlmIGEgbWlzcyBvciBudWxsIG9uIGFscmVhZHkgYXR0YWNrZWQuXHJcbiAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICovXHJcbiAgbWFya0NlbGxCYXNlZE9uSGl0KHJvdywgY29sLCBjdXJyZW50VHVybiwgaXNIaXQpIHtcclxuICAgIGlmIChpc0hpdCA9PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgZ3JpZCA9XHJcbiAgICAgIGN1cnJlbnRUdXJuID09IFwicGxheWVyXCJcclxuICAgICAgICA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGxheWVyLWdyaWRcIilcclxuICAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29tcHV0ZXItZ3JpZFwiKTtcclxuXHJcbiAgICBjb25zdCBjZWxsID0gdGhpcy5nZXRDZWxsKGdyaWQsIHJvdywgY29sKTtcclxuXHJcbiAgICBpZiAoIWNlbGwpIHJldHVybjtcclxuXHJcbiAgICBpZiAoaXNIaXQpIHtcclxuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiaGl0XCIpO1xyXG4gICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoXCJtaXNzXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwibWlzc1wiKTtcclxuICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKFwiaGl0XCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyB0aGUgJ3BsYWNlZCcgQ1NTIGNsYXNzIHRvIGFsbCBncmlkIGNlbGxzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIHJvdyBhbmQgY29sdW1uXHJcbiAgICogaW4gYm90aCB0aGUgc2hpcCBwbGFjZW1lbnQgcG9wdXAgKCNwbGFjZVNoaXBQb3B1cCkgYW5kIHRoZSBtYWluIHBsYXllciBncmlkICgjcGxheWVyLWdyaWQpLlxyXG4gICAqIEFzc3VtZXMgdGhhdCB2YWxpZCByb3cgYW5kIGNvbHVtbiB2YWx1ZXMgYXJlIHByb3ZpZGVkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvdyAtIFRoZSByb3cgaW5kZXggb2YgdGhlIGNlbGxzIHRvIG1hcmsuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbCAtIFRoZSBjb2x1bW4gaW5kZXggb2YgdGhlIGNlbGxzIHRvIG1hcmsuXHJcbiAgICovXHJcbiAgbWFya0NlbGxzQXNQbGFjZWQocm93LCBjb2wpIHtcclxuICAgIGNvbnN0IHBsYWNlU2hpcFBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwbGFjZVNoaXBQb3B1cFwiKTtcclxuICAgIGNvbnN0IHBsYXllckdyaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BsYXllci1ncmlkXCIpO1xyXG5cclxuICAgIGNvbnN0IHBvcHVwQ2VsbHMgPSBwbGFjZVNoaXBQb3B1cFxyXG4gICAgICA/IHRoaXMuZ2V0Q2VsbEdyb3VwKHBsYWNlU2hpcFBvcHVwLCByb3csIGNvbClcclxuICAgICAgOiBbXTtcclxuICAgIGNvbnN0IHBsYXllckNlbGxzID0gcGxheWVyR3JpZFxyXG4gICAgICA/IHRoaXMuZ2V0Q2VsbEdyb3VwKHBsYXllckdyaWQsIHJvdywgY29sKVxyXG4gICAgICA6IFtdO1xyXG5cclxuICAgIGNvbnN0IGFsbENlbGxzID0gWy4uLnBvcHVwQ2VsbHMsIC4uLnBsYXllckNlbGxzXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGNlbGwgb2YgYWxsQ2VsbHMpIHtcclxuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwicGxhY2VkXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgY2VsbCBlbGVtZW50IGF0IHRoZSBzcGVjaWZpZWQgcm93IGFuZCBjb2x1bW4gd2l0aGluIHRoZSBncmlkIGNvbnRhaW5lci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGdyaWRDb250YWluZXIgLSBUaGUgY29udGFpbmVyIGVsZW1lbnQgaG9sZGluZyB0aGUgZ3JpZCBjZWxscy5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gcm93IC0gVGhlIHplcm8tYmFzZWQgcm93IGluZGV4IG9mIHRoZSBkZXNpcmVkIGNlbGwuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbCAtIFRoZSB6ZXJvLWJhc2VkIGNvbHVtbiBpbmRleCBvZiB0aGUgZGVzaXJlZCBjZWxsLlxyXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudCB8IG51bGx9IFRoZSBjZWxsIGVsZW1lbnQgbWF0Y2hpbmcgdGhlIGdpdmVuIHJvdyBhbmQgY29sdW1uLCBvciBudWxsIGlmIG5vdCBmb3VuZC5cclxuICAgKi9cclxuICBnZXRDZWxsKGdyaWRDb250YWluZXIsIHJvdywgY29sKSB7XHJcbiAgICBjb25zdCBzZWxlY3RvciA9IGAuZ3JpZC1jZWxsW2RhdGEtcm93PVwiJHtyb3d9XCJdW2RhdGEtY29sPVwiJHtjb2x9XCJdYDtcclxuICAgIHJldHVybiBncmlkQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmVzIGEgZ3JvdXAgb2YgY2VsbHMgZnJvbSB0aGUgZ3JpZCBzdGFydGluZyBhdCB0aGUgc3BlY2lmaWVkIHJvdyBhbmQgY29sdW1uLFxyXG4gICAqIGV4dGVuZGluZyBpbiB0aGUgZGlyZWN0aW9uIHNwZWNpZmllZCBieSB0aGUgc2hpcCBwbGFjZW1lbnQgb3JpZW50YXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBncmlkQ29udGFpbmVyIC0gVGhlIGNvbnRhaW5lciBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgZ3JpZC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gcm93IC0gVGhlIHN0YXJ0aW5nIHJvdyBpbmRleCBpbiB0aGUgZ3JpZC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sIC0gVGhlIHN0YXJ0aW5nIGNvbHVtbiBpbmRleCBpbiB0aGUgZ3JpZC5cclxuICAgKiBAcmV0dXJucyB7QXJyYXk8SFRNTEVsZW1lbnQ+fSBBbiBhcnJheSBvZiBjZWxsIGVsZW1lbnRzIHRoYXQgZm9ybSB0aGUgZ3JvdXAgYmFzZWQgb24gdGhlIGN1cnJlbnQgY2VsbEhpZ2hsaWdodENvdW50IGFuZCBvcmllbnRhdGlvbi5cclxuICAgKi9cclxuICBnZXRDZWxsR3JvdXAoZ3JpZENvbnRhaW5lciwgcm93LCBjb2wpIHtcclxuICAgIGxldCByb3dQb3NpdGlvbiA9IHJvdztcclxuICAgIGxldCBjb2xQb3NpdGlvbiA9IGNvbDtcclxuXHJcbiAgICBjb25zdCBjZWxsR3JvdXAgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgdGhpcy5jZWxsSGlnaGxpZ2h0Q291bnQ7IGNvdW50KyspIHtcclxuICAgICAgY29uc3QgY2VsbCA9IHRoaXMuZ2V0Q2VsbChncmlkQ29udGFpbmVyLCByb3dQb3NpdGlvbiwgY29sUG9zaXRpb24pO1xyXG5cclxuICAgICAgaWYgKGNlbGwpIGNlbGxHcm91cC5wdXNoKGNlbGwpOyAvLyBIYW5kbGVzIGVkZ2UgY2FzZXNcclxuXHJcbiAgICAgIGlmICh0aGlzLiNzaGlwUGxhY2VtZW50T3JpZW50YXRpb24gPT0gXCJob3Jpem9udGFsXCIpIGNvbFBvc2l0aW9uKys7XHJcbiAgICAgIGlmICh0aGlzLiNzaGlwUGxhY2VtZW50T3JpZW50YXRpb24gPT0gXCJ2ZXJ0aWNhbFwiKSByb3dQb3NpdGlvbisrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjZWxsR3JvdXA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGhvdmVyIGV2ZW50IGxpc3RlbmVycyB0byBlYWNoIGdyaWQgY2VsbCB0aGF0IGFwcGx5IG9yIHJlbW92ZVxyXG4gICAqIGEgXCJob3Zlci1lZmZlY3RcIiBjbGFzcyB0byBhIGdyb3VwIG9mIGNlbGxzIChub3QganVzdCB0aGUgb25lIGhvdmVyZWQpLlxyXG4gICAqXHJcbiAgICogVGhpcyBpcyB1c2VkIHRvIHZpc3VhbGx5IHByZXZpZXcgbXVsdGktY2VsbCBzaGlwIHBsYWNlbWVudFxyXG4gICAqIGJ5IGhpZ2hsaWdodGluZyBhIGdyb3VwIG9mIGNlbGxzIHN0YXJ0aW5nIGZyb20gdGhlIGhvdmVyZWQgY2VsbCxcclxuICAgKiBkZXRlcm1pbmVkIGJ5IGdldENlbGxHcm91cCgpLlxyXG4gICAqL1xyXG4gIGFkZEdyaWRIb3Zlckxpc3RlbmVycyhncmlkQ29udGFpbmVyKSB7XHJcbiAgICBjb25zdCBjZWxscyA9IGdyaWRDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5ncmlkLWNlbGxcIik7XHJcblxyXG4gICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xyXG4gICAgICBjb25zdCByb3cgPSBwYXJzZUludChjZWxsLmRhdGFzZXQucm93LCAxMCk7XHJcbiAgICAgIGNvbnN0IGNvbCA9IHBhcnNlSW50KGNlbGwuZGF0YXNldC5jb2wsIDEwKTtcclxuXHJcbiAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5nZXRDZWxsR3JvdXAoZ3JpZENvbnRhaW5lciwgcm93LCBjb2wpO1xyXG4gICAgICAgIGdyb3VwLmZvckVhY2goKGMpID0+IGMuY2xhc3NMaXN0LmFkZChcImhvdmVyLWVmZmVjdFwiKSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdldENlbGxHcm91cChncmlkQ29udGFpbmVyLCByb3csIGNvbCk7XHJcbiAgICAgICAgZ3JvdXAuZm9yRWFjaCgoYykgPT4gYy5jbGFzc0xpc3QucmVtb3ZlKFwiaG92ZXItZWZmZWN0XCIpKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYW5kIGRpc3BsYXlzIHRoZSBcIlBsYWNlIFlvdXIgU2hpcHNcIiBwb3B1cCBVSSBmb3Igc2hpcCBwbGFjZW1lbnQuXHJcbiAgICpcclxuICAgKiBUaGlzIG1ldGhvZCBnZW5lcmF0ZXMgYSBwb3B1cCBtb2RhbCB0aGF0IGluY2x1ZGVzOlxyXG4gICAqIC0gQSBoZWFkZXIgcHJvbXB0aW5nIHRoZSBwbGF5ZXIgdG8gcGxhY2Ugc2hpcHNcclxuICAgKiAtIEEgc2hpcCBzZWxlY3Rpb24gc2VjdGlvblxyXG4gICAqIC0gQW4gb3JpZW50YXRpb24gc3dpdGNoIChob3Jpem9udGFsL3ZlcnRpY2FsKVxyXG4gICAqIC0gQSBncmlkIGZvciBzaGlwIHBsYWNlbWVudFxyXG4gICAqXHJcbiAgICogSXQgYWxzbyBhdHRhY2hlcyBuZWNlc3NhcnkgZXZlbnQgbGlzdGVuZXJzIGZvciBob3ZlciBlZmZlY3RzIGFuZCBjbGljayBldmVudHMuXHJcbiAgICpcclxuICAgKiBJdCBpcyBjYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgYSB2YWxpZCBwbGFjZW1lbnQgY2VsbC5cclxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IFRoZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIHBvcHVwIChmb3IgcG9zc2libGUgbGF0ZXIgcmVmZXJlbmNlIG9yIHJlbW92YWwpLlxyXG4gICAqL1xyXG4gIGNyZWF0ZVNoaXBQb3B1cCh2ZXJpZnlTaGlwUGxhY2VtZW50Rm4pIHtcclxuICAgIGNvbnN0IEhUTUxCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XHJcbiAgICBjb25zdCBwb3B1cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG4gICAgcG9wdXAuaWQgPSBcInBsYWNlU2hpcFBvcHVwXCI7XHJcbiAgICBwb3B1cC5jbGFzc0xpc3QuYWRkKFwicG9wdXBcIik7XHJcblxyXG4gICAgLy8gSGVhZGVyXHJcbiAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XHJcbiAgICBoZWFkZXIudGV4dENvbnRlbnQgPSBcIldlbGNvbWUgdG8gQmF0dGxlc2hpcCFcIjtcclxuICAgIHBvcHVwLmFwcGVuZChoZWFkZXIpO1xyXG5cclxuICAgIC8vIFNoaXAgU2VsZWN0aW9uXHJcblxyXG4gICAgY29uc3Qgc2hpcFNlbGVjdGlvbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBzaGlwU2VsZWN0aW9uRGl2LmlkID0gXCJzaGlwU2VsZWN0aW9uXCI7XHJcbiAgICBzaGlwU2VsZWN0aW9uRGl2LnRleHRDb250ZW50ID0gYFBsYWNlIHlvdXIgJHt0aGlzLmN1cnJlbnRTaGlwfWA7XHJcbiAgICBwb3B1cC5hcHBlbmQoc2hpcFNlbGVjdGlvbkRpdik7XHJcblxyXG4gICAgLy8gUGxhY2VtZW50IE9yaWVudGF0aW9uXHJcblxyXG4gICAgY29uc3Qgb3JpZW50YXRpb25Td2l0Y2ggPSB0aGlzLmNyZWF0ZU9yaWVudGF0aW9uU3dpdGNoKCk7XHJcbiAgICBwb3B1cC5hcHBlbmQob3JpZW50YXRpb25Td2l0Y2gpO1xyXG5cclxuICAgIC8vIFNoaXAgUGxhY2VtZW50IEdyaWRcclxuXHJcbiAgICBjb25zdCBwbGFjZW1lbnRHcmlkRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHBsYWNlbWVudEdyaWREaXYuaWQgPSBcInNoaXBQbGFjZW1lbnRcIjtcclxuICAgIHBsYWNlbWVudEdyaWREaXYuY2xhc3NMaXN0LmFkZChcImdyaWQtc21hbGxcIik7XHJcbiAgICB0aGlzLnBvcHVsYXRlR3JpZChwbGFjZW1lbnRHcmlkRGl2LCB7XHJcbiAgICAgIHJvdzogR2FtZWJvYXJkLkJPQVJEX1JPV1MsXHJcbiAgICAgIGNvbDogR2FtZWJvYXJkLkJPQVJEX0NPTFMsXHJcbiAgICAgIGNyZWF0ZUNlbGw6IHRoaXMuY3JlYXRlQ2VsbCxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5hZGRHcmlkSG92ZXJMaXN0ZW5lcnMocGxhY2VtZW50R3JpZERpdik7XHJcbiAgICB0aGlzLmFkZEdyaWRDbGlja0xpc3RlbmVycyhwbGFjZW1lbnRHcmlkRGl2LCB2ZXJpZnlTaGlwUGxhY2VtZW50Rm4pO1xyXG4gICAgcG9wdXAuYXBwZW5kKHBsYWNlbWVudEdyaWREaXYpO1xyXG5cclxuICAgIC8vIEJsdXIgT3ZlcmxheVxyXG4gICAgY29uc3Qgb3ZlcmxheSA9IHRoaXMuY3JlYXRlQmx1ck92ZXJsYXkoKTtcclxuICAgIG92ZXJsYXkuaWQgPSBcInBsYWNlU2hpcE92ZXJsYXlcIjtcclxuICAgIG92ZXJsYXkuYXBwZW5kKHBvcHVwKTtcclxuXHJcbiAgICBIVE1MQm9keS5hcHBlbmQob3ZlcmxheSk7XHJcblxyXG4gICAgcmV0dXJuIHBvcHVwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheXMgdGhlIHdpbm5lciBhbm5vdW5jZW1lbnQgcG9wdXAgb24gdGhlIHNjcmVlbi5cclxuICAgKlxyXG4gICAqIFRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBwb3B1cCBlbGVtZW50IHNob3dpbmcgdGhlIHdpbm5lcidzIGluZm9ybWF0aW9uLFxyXG4gICAqIGFsb25nIHdpdGggYW4gb3ZlcmxheSB0aGF0IGJsdXJzIHRoZSBiYWNrZ3JvdW5kIGZvciBmb2N1cy5cclxuICAgKiBJdCBhcHBlbmRzIHRoZSBwb3B1cCB0byB0aGUgb3ZlcmxheSBhbmQgcmV0dXJucyB0aGUgb3ZlcmxheSBlbGVtZW50LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHdpbm5lciAtIFRoZSBuYW1lIG9yIGlkZW50aWZpZXIgb2YgdGhlIHdpbm5lciB0byBkaXNwbGF5LlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHBsYXlBZ2FpbkZuIC0gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIHVzZXIgY2hvb3NlcyB0byBwbGF5IGFnYWluLlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IEFwcEZuIC0gQ2FsbGJhY2sgZnVuY3Rpb24gcmVsYXRlZCB0byB0aGUgYXBwJ3MgbWFpbiBmdW5jdGlvbmFsaXR5IChlLmcuLCB0byByZXNldCBvciBuYXZpZ2F0ZSkuXHJcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fSBUaGUgb3ZlcmxheSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIHdpbm5lciBwb3B1cC5cclxuICAgKi9cclxuICBkaXNwbGF5V2lubmVyKHdpbm5lciwgcGxheUFnYWluRm4sIEFwcEZuKSB7XHJcbiAgICBjb25zdCBwb3B1cCA9IHRoaXMuY3JlYXRlV2lubmVyUG9wdXAod2lubmVyLCBwbGF5QWdhaW5GbiwgQXBwRm4pO1xyXG4gICAgY29uc3Qgb3ZlcmxheSA9IHRoaXMuY3JlYXRlQmx1ck92ZXJsYXkoKTtcclxuXHJcbiAgICBvdmVybGF5LmFwcGVuZChwb3B1cCk7XHJcblxyXG4gICAgcmV0dXJuIG92ZXJsYXk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgcG9wdXAgZWxlbWVudCBkaXNwbGF5aW5nIHRoZSB3aW5uZXIncyBuYW1lLlxyXG4gICAqXHJcbiAgICogVGhpcyBtZXRob2QgZ2VuZXJhdGVzIGEgPGRpdj4gZWxlbWVudCB3aXRoIGEgaGVhZGVyICg8aDE+KSBjb250YWluaW5nXHJcbiAgICogdGhlIHByb3ZpZGVkIHdpbm5lcidzIG5hbWUuIFRoZSBwb3B1cCBpcyBhc3NpZ25lZCB0aGUgSUQgXCJ3aW5uZXJQb3B1cFwiLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHdpbm5lciAtIFRoZSBuYW1lIG9yIGlkZW50aWZpZXIgb2YgdGhlIHdpbm5lci5cclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwbGF5QWdhaW5GbiAtIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBwbGF5LWFnYWluIGJ1dHRvbiBpcyBjbGlja2VkLlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IEFwcEZuIC0gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gaGFuZGxlIGFkZGl0aW9uYWwgYXBwIGxvZ2ljIG9uIHBsYXkgYWdhaW4uXHJcbiAgICogQHJldHVybnMge0hUTUxEaXZFbGVtZW50fSBUaGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSB3aW5uZXIgcG9wdXAuXHJcbiAgICpcclxuICAgKi9cclxuICBjcmVhdGVXaW5uZXJQb3B1cCh3aW5uZXIsIHBsYXlBZ2FpbkZuLCBBcHBGbikge1xyXG4gICAgY29uc3QgcG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xyXG5cclxuICAgIGhlYWRlci50ZXh0Q29udGVudCA9IGAke3dpbm5lcn0gV29uIWA7XHJcblxyXG4gICAgcG9wdXAuYXBwZW5kKGhlYWRlcik7XHJcbiAgICBwb3B1cC5pZCA9IFwid2lubmVyUG9wdXBcIjtcclxuICAgIHBvcHVwLmNsYXNzTGlzdCA9IFwicG9wdXBcIjtcclxuXHJcbiAgICBjb25zdCBidXR0b24gPSB0aGlzLmNyZWF0ZVBsYXlBZ2FpbkJ1dHRvbihwbGF5QWdhaW5GbiwgQXBwRm4pO1xyXG4gICAgcG9wdXAuYXBwZW5kKGJ1dHRvbik7XHJcblxyXG4gICAgcmV0dXJuIHBvcHVwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIFwiUGxheSBBZ2FpblwiIGJ1dHRvbiBmb3IgcmVzdGFydGluZyB0aGUgQmF0dGxlc2hpcCBnYW1lLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcGxheUFnYWluRm4gLSBDYWxsYmFjayBmdW5jdGlvbiB0byByZXNldCB0aGUgZ2FtZSBzdGF0ZSBhbmQgVUkuXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJdCByZWNlaXZlcyBgcmVzZXRHYW1lVUlgIGFuZCBgQXBwRm5gIGFzIHBhcmFtZXRlcnMuXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gQXBwRm4gLSBBZGRpdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcCdzIG1haW4gbG9naWMuXHJcbiAgICogQHJldHVybnMge0hUTUxCdXR0b25FbGVtZW50fSBUaGUgY29uZmlndXJlZCBcIlBsYXkgQWdhaW5cIiBidXR0b24gZWxlbWVudC5cclxuICAgKi9cclxuICBjcmVhdGVQbGF5QWdhaW5CdXR0b24ocGxheUFnYWluRm4sIEFwcEZuKSB7XHJcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgYnV0dG9uLmlkID0gXCJwbGF5QWdhaW5CdXR0b25cIjtcclxuICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IFwiUGxheSBBZ2FpblwiO1xyXG5cclxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICBwbGF5QWdhaW5Gbih0aGlzLnJlc2V0R2FtZVVJLCBBcHBGbik7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gYnV0dG9uO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhbmQgYXBwZW5kcyBhIGJsdXIgb3ZlcmxheSB0byB0aGUgZG9jdW1lbnQgYm9keS5cclxuICAgKlxyXG4gICAqIFRoaXMgbWV0aG9kIGdlbmVyYXRlcyBhIDxkaXY+IGVsZW1lbnQgd2l0aCB0aGUgY2xhc3MgXCJibHVyT3ZlcmxheVwiLFxyXG4gICAqIGFwcGVuZHMgaXQgdG8gdGhlIDxib2R5PiwgYW5kIHJldHVybnMgdGhlIG92ZXJsYXkgZWxlbWVudC5cclxuICAgKiBUaGUgb3ZlcmxheSBpcyB0eXBpY2FsbHkgdXNlZCB0byBkaW0gb3IgYmx1ciB0aGUgYmFja2dyb3VuZFxyXG4gICAqIHdoZW4gZGlzcGxheWluZyBtb2RhbCBjb250ZW50IGxpa2UgYSB3aW5uZXIgcG9wdXAuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7SFRNTERpdkVsZW1lbnR9IFRoZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGJsdXIgb3ZlcmxheS5cclxuICAgKi9cclxuICBjcmVhdGVCbHVyT3ZlcmxheSgpIHtcclxuICAgIGNvbnN0IEhUTUxCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XHJcbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoXCJibHVyT3ZlcmxheVwiKTtcclxuXHJcbiAgICBIVE1MQm9keS5hcHBlbmQob3ZlcmxheSk7XHJcblxyXG4gICAgcmV0dXJuIG92ZXJsYXk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgRE9NIGVsZW1lbnQgY29udGFpbmluZyBhIHBhaXIgb2YgcmFkaW8gYnV0dG9uc1xyXG4gICAqIGZvciBzZWxlY3Rpbmcgb3JpZW50YXRpb246IFwiSG9yaXpvbnRhbFwiIG9yIFwiVmVydGljYWxcIi5cclxuICAgKlxyXG4gICAqIC0gRWFjaCByYWRpbyBidXR0b24gaXMgYXNzb2NpYXRlZCB3aXRoIGEgbGFiZWwuXHJcbiAgICogLSBCb3RoIGlucHV0cyBzaGFyZSB0aGUgc2FtZSAnbmFtZScgYXR0cmlidXRlIChcIm9yaWVudGF0aW9uXCIpIHNvIG9ubHkgb25lIGNhbiBiZSBzZWxlY3RlZCBhdCBhIHRpbWUuXHJcbiAgICogLSBUaGUgcmV0dXJuZWQgPGRpdj4gY2FuIGJlIGFwcGVuZGVkIHRvIHRoZSBET00gd2hlcmV2ZXIgbmVlZGVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0hUTUxEaXZFbGVtZW50fSBBIDxkaXY+IGNvbnRhaW5pbmcgbGFiZWxlZCByYWRpbyBidXR0b25zIGZvciBvcmllbnRhdGlvbiBzZWxlY3Rpb24uXHJcbiAgICovXHJcbiAgY3JlYXRlT3JpZW50YXRpb25Td2l0Y2goKSB7XHJcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2LmlkID0gXCJvcmllbnRhdGlvblN3aXRjaFwiO1xyXG5cclxuICAgIGNvbnN0IGhvcml6b250YWxMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGhvcml6b250YWxMYWJlbC50ZXh0Q29udGVudCA9IFwiSG9yaXpvbnRhbFwiO1xyXG4gICAgZGl2LmFwcGVuZENoaWxkKGhvcml6b250YWxMYWJlbCk7XHJcblxyXG4gICAgY29uc3QgdmVydGljYWxMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIHZlcnRpY2FsTGFiZWwudGV4dENvbnRlbnQgPSBcIlZlcnRpY2FsXCI7XHJcbiAgICBkaXYuYXBwZW5kQ2hpbGQodmVydGljYWxMYWJlbCk7XHJcblxyXG4gICAgY29uc3QgaG9yaXpvbnRhbFN3aXRjaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGhvcml6b250YWxTd2l0Y2guaWQgPSBcImhvcml6b250YWxTd2l0Y2hcIjtcclxuICAgIGhvcml6b250YWxTd2l0Y2gudHlwZSA9IFwicmFkaW9cIjtcclxuICAgIGhvcml6b250YWxTd2l0Y2guY2hlY2tlZCA9IFwiY2hlY2tlZFwiO1xyXG4gICAgaG9yaXpvbnRhbFN3aXRjaC5uYW1lID0gXCJvcmllbnRhdGlvblwiO1xyXG4gICAgdGhpcy5hZGRTd2l0Y2hDaGFuZ2VMaXN0ZW5lcihob3Jpem9udGFsU3dpdGNoKTtcclxuICAgIGhvcml6b250YWxMYWJlbC5hcHBlbmRDaGlsZChob3Jpem9udGFsU3dpdGNoKTtcclxuXHJcbiAgICBjb25zdCB2ZXJ0aWNhbFN3aXRjaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIHZlcnRpY2FsU3dpdGNoLmlkID0gXCJ2ZXJ0aWNhbFN3aXRjaFwiO1xyXG4gICAgdmVydGljYWxTd2l0Y2gudHlwZSA9IFwicmFkaW9cIjtcclxuICAgIHZlcnRpY2FsU3dpdGNoLm5hbWUgPSBcIm9yaWVudGF0aW9uXCI7XHJcbiAgICB0aGlzLmFkZFN3aXRjaENoYW5nZUxpc3RlbmVyKHZlcnRpY2FsU3dpdGNoKTtcclxuICAgIHZlcnRpY2FsTGFiZWwuYXBwZW5kQ2hpbGQodmVydGljYWxTd2l0Y2gpO1xyXG5cclxuICAgIHJldHVybiBkaXY7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgY2xpY2sgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGdpdmVuIGlucHV0IGVsZW1lbnQuXHJcbiAgICogV2hlbiBjbGlja2VkLCB0aGlzIHRvZ2dsZXMgdGhlIHNoaXBQbGFjZW1lbnRPcmllbnRhdGlvbiBwcm9wZXJ0eSB2aWEgaXRzIHNldHRlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGlucHV0RWxlIC0gVGhlIGlucHV0IGVsZW1lbnQgdG8gYXR0YWNoIHRoZSBjbGljayBsaXN0ZW5lciB0by5cclxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IFRoZSBzYW1lIGlucHV0IGVsZW1lbnQsIHdpdGggdGhlIGxpc3RlbmVyIGF0dGFjaGVkLlxyXG4gICAqL1xyXG4gIGFkZFN3aXRjaENoYW5nZUxpc3RlbmVyKGlucHV0RWxlKSB7XHJcbiAgICBpbnB1dEVsZS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgbmV4dE9yaWVudGF0aW9uID1cclxuICAgICAgICB0aGlzLnNoaXBQbGFjZW1lbnRPcmllbnRhdGlvbiA9PSBcImhvcml6b250YWxcIlxyXG4gICAgICAgICAgPyBcInZlcnRpY2FsXCJcclxuICAgICAgICAgIDogXCJob3Jpem9udGFsXCI7XHJcblxyXG4gICAgICB0aGlzLnNoaXBQbGFjZW1lbnRPcmllbnRhdGlvbiA9IG5leHRPcmllbnRhdGlvbjsgLy8gVG9nZ2xlcyBzZXR0ZXJcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBpbnB1dEVsZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFycyBhbGwgZ3JpZHMgYW5kIHJlbW92ZXMgYWxsIHBvcHVwcyBhbmQgYmx1ciBvdmVybGF5cyBmcm9tIHRoZSBET00uXHJcbiAgICovXHJcbiAgcmVzZXRHYW1lVUkoKSB7XHJcbiAgICBjb25zdCBhbGxHcmlkcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ncmlkXCIpKTtcclxuICAgIGNvbnN0IHBvcHVwcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wb3B1cFwiKSk7XHJcbiAgICBjb25zdCBvdmVybGF5cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ibHVyT3ZlcmxheVwiKSk7XHJcblxyXG4gICAgaWYgKGFsbEdyaWRzKSB7XHJcbiAgICAgIGFsbEdyaWRzLmZvckVhY2goKGdyaWQpID0+IHtcclxuICAgICAgICBncmlkLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwb3B1cHMpIHtcclxuICAgICAgcG9wdXBzLmZvckVhY2goKHBvcHVwKSA9PiB7XHJcbiAgICAgICAgcG9wdXAucmVtb3ZlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG92ZXJsYXlzLmZvckVhY2goKG92ZXJsYXkpID0+IHtcclxuICAgICAgb3ZlcmxheS5yZW1vdmUoKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCIvKipcclxuICogR2FtZUNvbnRyb2xsZXJcclxuICpcclxuICogVGhpcyBjbGFzcyBtYW5hZ2VzIHRoZSBjb3JlIGdhbWVwbGF5IGxvZ2ljIGZvciBhIEJhdHRsZXNoaXAtc3R5bGUgZ2FtZSxcclxuICogY29vcmRpbmF0aW5nIGJldHdlZW4gdGhlIHBsYXllciBhbmQgY29tcHV0ZXIgZW50aXRpZXMsIHRoZWlyIGdhbWVib2FyZHMsXHJcbiAqIGFuZCBoYW5kbGluZyB0dXJucywgYXR0YWNrcywgYW5kIGdhbWUgc3RhdGUgdHJhbnNpdGlvbnMuXHJcbiAqXHJcbiAqIFJlc3BvbnNpYmlsaXRpZXMgaW5jbHVkZTpcclxuICogLSBNYW5hZ2luZyBnYW1lIHN0YXRlIChjdXJyZW50IHR1cm4sIGdhbWUgb3ZlciBzdGF0dXMsIHdpbm5lcilcclxuICogLSBIYW5kbGluZyBhc3luY2hyb25vdXMgcGxheWVyIGlucHV0IGZvciBzaGlwIHBsYWNlbWVudCBhbmQgYXR0YWNrc1xyXG4gKiAtIEV4ZWN1dGluZyBnYW1lIHJvdW5kcyB3aXRoIGFsdGVybmF0aW5nIHR1cm5zIGJldHdlZW4gcGxheWVyIGFuZCBjb21wdXRlclxyXG4gKiAtIFBsYWNpbmcgc2hpcHMgZm9yIGJvdGggcGxheWVyIGFuZCBjb21wdXRlclxyXG4gKiAtIENoZWNraW5nIGZvciBnYW1lIG92ZXIgY29uZGl0aW9uc1xyXG4gKiAtIFJlc2V0dGluZyBhbmQgcmVwbGF5aW5nIHRoZSBnYW1lXHJcbiAqXHJcbiAqIFRoZSBjbGFzcyByZWxpZXMgaGVhdmlseSBvbiBkZXBlbmRlbmN5IGluamVjdGlvbiBmb3IgVUkgaW50ZXJhY3Rpb25zLFxyXG4gKiBzdWNoIGFzIG9idGFpbmluZyBwbGF5ZXIgaW5wdXRzIGFuZCB1cGRhdGluZyB0aGUgVUkgYmFzZWQgb24gZ2FtZSBldmVudHMsXHJcbiAqIGFsbG93aW5nIHRoZSBjb3JlIGdhbWUgbG9naWMgdG8gYmUgaW5kZXBlbmRlbnQgb2YgYW55IHNwZWNpZmljIFVJIGZyYW1ld29yay5cclxuICpcclxuICogVXNhZ2UgdHlwaWNhbGx5IGludm9sdmVzOlxyXG4gKiAxLiBJbnN0YW50aWF0aW5nIHdpdGggcGxheWVyIGFuZCBjb21wdXRlciBvYmplY3RzIChlYWNoIHdpdGggZ2FtZWJvYXJkcylcclxuICogMi4gU3RhcnRpbmcgdGhlIGdhbWUgbG9vcCB2aWEgcGxheUdhbWUsIHByb3ZpZGluZyBVSSBjYWxsYmFja3MgZm9yIGlucHV0L291dHB1dFxyXG4gKiAzLiBIYW5kbGluZyBnYW1lIHJvdW5kcyB1bnRpbCBhIHdpbm5lciBpcyBkZWNsYXJlZFxyXG4gKiA0LiBPZmZlcmluZyBhYmlsaXR5IHRvIHJlc2V0IGFuZCByZXBsYXkgdGhlIGdhbWVcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVDb250cm9sbGVyIHtcclxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIGNvbXB1dGVyKSB7XHJcbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcclxuICAgIHRoaXMuY29tcHV0ZXIgPSBjb21wdXRlcjtcclxuICAgIHRoaXMuY3VycmVudFR1cm4gPSBcInBsYXllclwiO1xyXG4gICAgdGhpcy5nYW1lT3ZlciA9IGZhbHNlO1xyXG4gICAgdGhpcy53aW5uZXIgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVwZWF0ZWRseSBjaGVja3MgdGhlIHBsYXllcidzIHNoaXAgcG9zaXRpb25zIGV2ZXJ5IDUwMG1zIHVudGlsIDUgb3IgbW9yZSBzaGlwcyBoYXZlIGJlZW4gcGxhY2VkLlxyXG4gICAqIE9uY2UgdGhlIGNvbmRpdGlvbiBpcyBtZXQsIHRoZSBwb2xsaW5nIHN0b3BzIGFuZCB0aGUgZnVuY3Rpb24gcmVzb2x2ZXMgd2l0aCB0aGUgZmluYWwgc2hpcCBwb3NpdGlvbnMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXRQbGF5ZXJTaGlwUG9zaXRpb25zIC0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGN1cnJlbnQgYXJyYXkgb2YgcGxheWVyIHNoaXAgcG9zaXRpb25zLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgc2hpcCBwb3NpdGlvbnMgb25jZSA1IG9yIG1vcmUgYXJlIHJlY29yZGVkLlxyXG4gICAqL1xyXG4gIHdhaXRGb3JGaXZlU2hpcHMoZ2V0UGxheWVyU2hpcFBvc2l0aW9ucykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IGdldFBsYXllclNoaXBQb3NpdGlvbnMoKTtcclxuXHJcbiAgICAgICAgaWYgKHBvc2l0aW9ucy5sZW5ndGggPj0gNSkge1xyXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbiAgICAgICAgICByZXNvbHZlKHBvc2l0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCA1MDApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyB3YWl0Rm9yUGxheWVyQXR0YWNrKGdldFBsYXllckF0dGFja1Bvc2l0aW9uKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRQbGF5ZXJBdHRhY2tQb3NpdGlvbigpO1xyXG5cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBwb3NpdGlvbiAmJlxyXG4gICAgICAgICAgdHlwZW9mIHBvc2l0aW9uID09PSBcIm9iamVjdFwiICYmXHJcbiAgICAgICAgICBOdW1iZXIuaXNJbnRlZ2VyKHBvc2l0aW9uLnJvdykgJiZcclxuICAgICAgICAgIE51bWJlci5pc0ludGVnZXIocG9zaXRpb24uY29sKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbiAgICAgICAgICByZXNvbHZlKHBvc2l0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIDEwMCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBkZWZhdWx0IGF0dGFjayBwb3NpdGlvbiB1c2VkIHdoZW4gbm8gcGxheWVyIGlucHV0IGlzIGF2YWlsYWJsZS5cclxuICAgKiBDdXJyZW50bHkgaGFyZGNvZGVkIHRvIHRoZSB0b3AtbGVmdCBjb3JuZXIgKDAsIDApLlxyXG4gICAqIFRoaXMgaXMgdXNlZCBhcyBhIGZhbGxiYWNrIGluIHRlc3QgZW52aXJvbm1lbnRzIG9yIG5vbi1pbnRlcmFjdGl2ZSBzY2VuYXJpb3MuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7eyByb3c6IG51bWJlciwgY29sOiBudW1iZXIgfX0gQSBkZWZhdWx0IGF0dGFjayBjb29yZGluYXRlLlxyXG4gICAqL1xyXG4gIGdldERlZmF1bHRBdHRhY2tQb3NpdGlvbigpIHtcclxuICAgIHJldHVybiB7IHJvdzogMCwgY29sOiAwIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydHMgdGhlIGdhbWUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXRQbGF5ZXJTaGlwUG9zaXRpb25zIC0gVUkgRGVwZW5kZW5jeSBJbmplY3Rpb25cclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXRQbGF5ZXJBdHRhY2tQb3NpdG9uIC0gVUkgRGVwZW5kZW5jeSBJbmplY3Rpb25cclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwbGF5V2lubmVyIC0gVUkgRGVwZW5kZW5jeSBJbmplY3Rpb25cclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtYXJrQ2VsbEJhc2VkT25IaXQgLSBVSSBESSB1c2VkIHRvIG1hcmsgY2VsbHMgb24gYW4gYXR0YWNrLlxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IEFwcEZuXHJcbiAgICovXHJcbiAgYXN5bmMgcGxheUdhbWUoXHJcbiAgICBnZXRQbGF5ZXJTaGlwUG9zaXRpb25zLFxyXG4gICAgZ2V0UGxheWVyQXR0YWNrUG9zaXRvbixcclxuICAgIGRpc3BsYXlXaW5uZXIsXHJcbiAgICBtYXJrQ2VsbEJhc2VkT25IaXQsXHJcbiAgICBBcHBGblxyXG4gICkge1xyXG4gICAgYXdhaXQgdGhpcy5zZXR1cEdhbWUoZ2V0UGxheWVyU2hpcFBvc2l0aW9ucyk7XHJcblxyXG4gICAgd2hpbGUgKCF0aGlzLmdhbWVPdmVyKSB7XHJcbiAgICAgIGF3YWl0IHRoaXMucGxheVJvdW5kKHtcclxuICAgICAgICBnZXRQbGF5ZXJBdHRhY2tQb3NpdGlvbjogZ2V0UGxheWVyQXR0YWNrUG9zaXRvbixcclxuICAgICAgICBtYXJrQ2VsbEJhc2VkT25IaXQ6IG1hcmtDZWxsQmFzZWRPbkhpdCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcGxheVdpbm5lcih0aGlzLndpbm5lciwgdGhpcy5wbGF5QWdhaW4sIEFwcEZuKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0cyBnYW1lIHN0YXRlIHZhcmlhYmxlcywgZW5zdXJpbmcgZ2FtZSBpcyByZWFkeSB0byByZXBsYXkuXHJcbiAgICovXHJcbiAgcmVzZXRHYW1lKCkge1xyXG4gICAgdGhpcy5jdXJyZW50VHVybiA9IFwicGxheWVyXCI7XHJcbiAgICB0aGlzLmdhbWVPdmVyID0gZmFsc2U7XHJcbiAgICB0aGlzLndpbm5lciA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5wbGF5ZXIuZ2FtZWJvYXJkLnJlc2V0Qm9hcmQoKTtcclxuICAgIHRoaXMuY29tcHV0ZXIuZ2FtZWJvYXJkLnJlc2V0Qm9hcmQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdXAgdGhlIGdhbWVwbGF5IGxvb3AgYnkgcmVzZXRpbmcgZ2FtZSBzdGF0ZVxyXG4gICAqIHZhcmlhYmxlcyBhbmQgcGxhY2luZyBzaGlwcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGdldFBsYXllclNoaXBQb3NpdGlvbnMgVUkgRGVwZW5kZW5jeSBJbmplY3Rpb25cclxuICAgKi9cclxuICBhc3luYyBzZXR1cEdhbWUoZ2V0UGxheWVyU2hpcFBvc2l0aW9ucykge1xyXG4gICAgLy8gUmVzZXQgZ2FtZSBzdGF0ZSB2YXJpYWJsZXMuXHJcbiAgICB0aGlzLnJlc2V0R2FtZSgpO1xyXG4gICAgLy8gR2V0IFBsYXllciBpbnB1dCBmcm9tIFVJIGFuZCBQbGFjZUFsbFNoaXBzIHVzaW5nIHRoZWlyIHNoaXAgcG9zaXRpb25zXHJcbiAgICBjb25zdCBwbGF5ZXJTaGlwUG9zdGlvbnMgPSBhd2FpdCB0aGlzLndhaXRGb3JGaXZlU2hpcHMoXHJcbiAgICAgIGdldFBsYXllclNoaXBQb3NpdGlvbnNcclxuICAgICk7XHJcbiAgICB0aGlzLnBsYWNlQWxsU2hpcHMocGxheWVyU2hpcFBvc3Rpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2FtZSBpZiBvdmVyIGJ5IGNoZWNraW5nXHJcbiAgICogaWYgYW55IGZsZWV0IGhhcyBiZWVuIHN1bmsuXHJcbiAgICovXHJcbiAgaXNHYW1lT3ZlcigpIHtcclxuICAgIGNvbnN0IGlzQ29tcHV0ZXJGbGVldFN1bmsgPSB0aGlzLmNvbXB1dGVyLmdhbWVib2FyZC5yZXBvcnRTaGlwU3RhdHVzKCk7XHJcbiAgICBjb25zdCBpc1BsYXllckZsZWV0U3VuayA9IHRoaXMucGxheWVyLmdhbWVib2FyZC5yZXBvcnRTaGlwU3RhdHVzKCk7XHJcblxyXG4gICAgaWYgKGlzQ29tcHV0ZXJGbGVldFN1bmsgfHwgaXNQbGF5ZXJGbGVldFN1bmspIHRoaXMuZ2FtZU92ZXIgPSB0cnVlO1xyXG5cclxuICAgIGlmIChpc0NvbXB1dGVyRmxlZXRTdW5rKSB7XHJcbiAgICAgIHRoaXMud2lubmVyID0gXCJwbGF5ZXJcIjtcclxuICAgIH0gZWxzZSBpZiAoaXNQbGF5ZXJGbGVldFN1bmspIHtcclxuICAgICAgdGhpcy53aW5uZXIgPSBcImNvbXB1dGVyXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZ2FtZU92ZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeGVjdXRlcyBhIGZ1bGwgcm91bmQgb2YgZ2FtZXBsYXkgY29uc2lzdGluZyBvZiBvbmUgcGxheWVyIGF0dGFja1xyXG4gICAqIGZvbGxvd2VkIGJ5IG9uZSBjb21wdXRlciBhdHRhY2suIFVwZGF0ZXMgdGhlIGdhbWUgc3RhdGUgYWNjb3JkaW5nbHkuXHJcbiAgICpcclxuICAgKiAtIFNraXBzIGV4ZWN1dGlvbiBpZiB0aGUgZ2FtZSBpcyBhbHJlYWR5IG92ZXIuXHJcbiAgICogLSBXYWl0cyBmb3IgcGxheWVyJ3MgaW5wdXQgKHZpYSBpbmplY3RlZCBVSSBtZXRob2QpIG9yIGRlZmF1bHRzIHRvIGEgZmFsbGJhY2suXHJcbiAgICogLSBBcHBsaWVzIGhpdC9taXNzIGxvZ2ljIGFuZCB1cGRhdGVzIHRoZSBib2FyZCB1c2luZyB0aGUgaW5qZWN0ZWQgVUkgaGFuZGxlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJhbXMuZ2V0UGxheWVyQXR0YWNrUG9zaXRpb24gLSBVSSBkZXBlbmRlbmN5IHRvIGdldCBwbGF5ZXIncyBhdHRhY2sgaW5wdXQuXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyYW1zLm1hcmtDZWxsQmFzZWRPbkhpdCAtIFVJIGRlcGVuZGVuY3kgdXNlZCB0byB1cGRhdGUgdGhlIGJvYXJkIHdpdGggaGl0L21pc3MuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBhc3luYyBwbGF5Um91bmQoe1xyXG4gICAgZ2V0UGxheWVyQXR0YWNrUG9zaXRpb246IGdldFBsYXllckF0dGFja1Bvc2l0aW9uLFxyXG4gICAgbWFya0NlbGxCYXNlZE9uSGl0OiBtYXJrQ2VsbEJhc2VkT25IaXQsXHJcbiAgfSkge1xyXG4gICAgaWYgKHRoaXMuaXNHYW1lT3ZlcigpKSByZXR1cm47XHJcblxyXG4gICAgLy8gUGxheWVyJ3MgYXR0YWNrXHJcbiAgICBjb25zdCBwbGF5ZXJBdHRhY2tQb3NpdGlvbiA9XHJcbiAgICAgIHR5cGVvZiBnZXRQbGF5ZXJBdHRhY2tQb3NpdGlvbiA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgPyBhd2FpdCB0aGlzLndhaXRGb3JQbGF5ZXJBdHRhY2soZ2V0UGxheWVyQXR0YWNrUG9zaXRpb24pXHJcbiAgICAgICAgOiB0aGlzLmdldERlZmF1bHRBdHRhY2tQb3NpdGlvbigpO1xyXG5cclxuICAgIGNvbnN0IHsgcm93LCBjb2wgfSA9IHBsYXllckF0dGFja1Bvc2l0aW9uO1xyXG4gICAgdGhpcy50YWtlVHVybih7XHJcbiAgICAgIHJvdzogcm93LFxyXG4gICAgICBjb2w6IGNvbCxcclxuICAgICAgbWFya0NlbGxCYXNlZE9uSGl0OiBtYXJrQ2VsbEJhc2VkT25IaXQsXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGhpcy5pc0dhbWVPdmVyKCkpIHJldHVybjtcclxuXHJcbiAgICAvLyBDb21wdXRlcidzIGF0dGFja1xyXG4gICAgdGhpcy50YWtlVHVybih7IG1hcmtDZWxsQmFzZWRPbkhpdDogbWFya0NlbGxCYXNlZE9uSGl0IH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlcyB0aGUgbG9naWMgZm9yIGEgcGxheWVyJ3Mgb3IgY29tcHV0ZXIncyB0dXJuLlxyXG4gICAqIEV4ZWN1dGVzIGFuIGF0dGFjayBiYXNlZCBvbiB0aGUgY3VycmVudCB0dXJuLFxyXG4gICAqIHRoZW4gYWx0ZXJuYXRlcyB0aGUgdHVybi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbcm93XSAtIFRoZSByb3cgY29vcmRpbmF0ZSBvZiB0aGUgYXR0YWNrIChwbGF5ZXIgb25seSkuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtjb2xdIC0gVGhlIGNvbHVtbiBjb29yZGluYXRlIG9mIHRoZSBhdHRhY2sgKHBsYXllciBvbmx5KS5cclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtYXJrQ2VsbEJhc2VkT25IaXQgLSBVSSBESSB1c2VkIHRvIG1hcmsgY2VsbHMgb24gYW4gYXR0YWNrLlxyXG4gICAqL1xyXG4gIHRha2VUdXJuKHsgcm93OiByb3csIGNvbDogY29sLCBtYXJrQ2VsbEJhc2VkT25IaXQ6IG1hcmtDZWxsQmFzZWRPbkhpdCB9KSB7XHJcbiAgICBjb25zdCBwbGF5ZXIgPSB0aGlzLnBsYXllcjtcclxuICAgIGNvbnN0IGNvbXB1dGVyID0gdGhpcy5jb21wdXRlcjtcclxuXHJcbiAgICBpZiAodGhpcy5nYW1lT3ZlcikgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IG9wcG9uZW50ID1cclxuICAgICAgdGhpcy5jdXJyZW50VHVybiA9PT0gXCJwbGF5ZXJcIiA/IHRoaXMuY29tcHV0ZXIgOiB0aGlzLnBsYXllcjtcclxuICAgIGNvbnN0IG9wcG9uZW50VHlwZSA9IHRoaXMuY3VycmVudFR1cm4gPT09IFwicGxheWVyXCIgPyBcImNvbXB1dGVyXCIgOiBcInBsYXllclwiO1xyXG5cclxuICAgIGlmICh0aGlzLmN1cnJlbnRUdXJuID09IFwicGxheWVyXCIpIHtcclxuICAgICAgY29uc3Qgb3Bwb25lbnRIaXQgPSBwbGF5ZXIuYXR0YWNrKG9wcG9uZW50LCByb3csIGNvbCk7XHJcbiAgICAgIG1hcmtDZWxsQmFzZWRPbkhpdChyb3csIGNvbCwgb3Bwb25lbnRUeXBlLCBvcHBvbmVudEhpdCk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudFR1cm4gPT0gXCJjb21wdXRlclwiKSB7XHJcbiAgICAgIGNvbnN0IHsgcGxheWVySGl0LCByb3csIGNvbCB9ID0gY29tcHV0ZXIucmFuZG9tQXR0YWNrKG9wcG9uZW50KTtcclxuICAgICAgbWFya0NlbGxCYXNlZE9uSGl0KHJvdywgY29sLCBvcHBvbmVudFR5cGUsIHBsYXllckhpdCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jdXJyZW50VHVybiA9IHRoaXMuY3VycmVudFR1cm4gPT09IFwicGxheWVyXCIgPyBcImNvbXB1dGVyXCIgOiBcInBsYXllclwiO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcGxhY2VBbGxTaGlwcyBNZXRob2QuXHJcbiAgICpcclxuICAgKiBQbGFjZXMgYWxsIG9mIHRoZSBwbGF5ZXIncyBhbmQgY29tcHV0ZXIncyBzaGlwcyBvbiB0aGUgYm9hcmQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0FycmF5PG9iamVjdD59IHNoaXBQb3NpdGlvbnMgLSBBbiBhcnJheSBvZiBzaGlwIHBvc2l0aW9ucyBmb3IgdGhlIHBsYXllci5cclxuICAgKiBAcmV0dXJuIHtCb29sZWFufSAtIFJldHVybnMgdHJ1ZSBpZiBhbGwgc2hpcHMgYXJlIHBsYWNlZCBzdWNjZXNzZnVsbHksIGZhbHNlIG90aGVyd2lzZS5cclxuICAgKi9cclxuICBwbGFjZUFsbFNoaXBzKHNoaXBQb3NpdGlvbnMpIHtcclxuICAgIGxldCBzdWNjZXNzID0gdHJ1ZTtcclxuXHJcbiAgICBpZiAoIXRoaXMucGxhY2VQbGF5ZXJTaGlwcyhzaGlwUG9zaXRpb25zKSkge1xyXG4gICAgICBzdWNjZXNzID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLnBsYWNlQ29tcHV0ZXJTaGlwcyhcInJhbmRvbWx5XCIpKSB7XHJcbiAgICAgIHN1Y2Nlc3MgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3VjY2VzcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBsYWNlcyBhbGwgc2hpcHMgZm9yIHRoZSBwbGF5ZXIgYmFzZWQgb24gcG9zaXRpb25zIGZyb20gdGhlIFVJLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBzaGlwUG9zaXRpb25zIC0gQXJyYXkgb2Ygc2hpcCBwb3NpdGlvbiBvYmplY3RzLlxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGFsbCBzaGlwcyBwbGFjZWQgc3VjY2Vzc2Z1bGx5LCBvdGhlcndpc2UgZmFsc2UuXHJcbiAgICovXHJcbiAgcGxhY2VQbGF5ZXJTaGlwcyhzaGlwUG9zaXRpb25zKSB7XHJcbiAgICBjb25zdCB2YWxpZEtleXMgPSBbXCJyb3dcIiwgXCJjb2xcIiwgXCJzaGlwTmFtZVwiLCBcImRpcmVjdGlvblwiXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHNoaXBQb3NpdGlvbiBvZiBzaGlwUG9zaXRpb25zKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0eXBlb2Ygc2hpcFBvc2l0aW9uICE9PSBcIm9iamVjdFwiIHx8XHJcbiAgICAgICAgc2hpcFBvc2l0aW9uID09PSBudWxsIHx8XHJcbiAgICAgICAgIXZhbGlkS2V5cy5ldmVyeSgoa2V5KSA9PiBrZXkgaW4gc2hpcFBvc2l0aW9uKVxyXG4gICAgICApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciwgb25lIG9mIHRoZSBzaGlwIHBvc2l0aW9ucyBoYXMgaW52YWxpZCBrZXlzXCIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBzaGlwUG9zaXRpb24gb2Ygc2hpcFBvc2l0aW9ucykge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBsYXllci5wbGFjZVNoaXAoXHJcbiAgICAgICAgc2hpcFBvc2l0aW9uW1wicm93XCJdLFxyXG4gICAgICAgIHNoaXBQb3NpdGlvbltcImNvbFwiXSxcclxuICAgICAgICBzaGlwUG9zaXRpb25bXCJzaGlwTmFtZVwiXSxcclxuICAgICAgICBzaGlwUG9zaXRpb25bXCJkaXJlY3Rpb25cIl1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBUaGlzIG5vdyBleGl0cyBwbGFjZVBsYXllclNoaXBzIGltbWVkaWF0ZWx5XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUGxhY2VDb21wdXRlclNoaXBzIE1ldGhvZC5cclxuICAgKlxyXG4gICAqIENhbGxzIGEgbWV0aG9kIGluIENvbXB1dGVyIGhhbmRsaW5nIGFsbCBzaGlwIHBsYWNlbWVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSAtIE1ldGhvZCBuYW1lXHJcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBvbiBzdWNjZXNzIGVsc2UgZmFsc2UuXHJcbiAgICovXHJcbiAgcGxhY2VDb21wdXRlclNoaXBzKG1ldGhvZE5hbWUpIHtcclxuICAgIG1ldGhvZE5hbWUgPSBgcGxhY2VTaGlwcyR7dGhpcy5jYXBpdGFsaXplKG1ldGhvZE5hbWUpfWA7XHJcblxyXG4gICAgaWYgKHR5cGVvZiB0aGlzLmNvbXB1dGVyW21ldGhvZE5hbWVdID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZXJbbWV0aG9kTmFtZV0oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtZXRob2Q6ICR7bWV0aG9kTmFtZX1gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhcGl0YWxpemUobWV0aG9kTmFtZSkge1xyXG4gICAgcmV0dXJuIG1ldGhvZE5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBtZXRob2ROYW1lLnNsaWNlKDEpO1xyXG4gIH1cclxuXHJcbiAgLypcclxuICAgKiBSZXNldHMgZ2FtZXN0YXRlIGFuZCBVSSBhbGxvd2luZyB0aGUgZ2FtZSB0byBiZSByZXBsYXllZFxyXG4gICAqL1xyXG4gIHBsYXlBZ2FpbihyZXNldEdhbWVVSUZuLCBhcHBGbikge1xyXG4gICAgaWYgKHR5cGVvZiByZXNldEdhbWVVSUZuID09PSBcImZ1bmN0aW9uXCIpIHJlc2V0R2FtZVVJRm4oKTtcclxuICAgIGlmICh0eXBlb2YgYXBwRm4gPT09IFwiZnVuY3Rpb25cIikgYXBwRm4oKTtcclxuICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBwbGF5ZXIgaW4gdGhlIEJhdHRsZXNoaXAgZ2FtZS5cclxuICpcclxuICogRW5jYXBzdWxhdGVzIGEgZ2FtZWJvYXJkIGFuZCBwcm92aWRlcyBtZXRob2RzIHRvOlxyXG4gKiAtIEF0dGFjayBhbiBvcHBvbmVudCdzIGdhbWVib2FyZC5cclxuICogLSBQbGFjZSBzaGlwcyBvbiB0aGUgcGxheWVyJ3Mgb3duIGdhbWVib2FyZC5cclxuICpcclxuICogVGhpcyBjbGFzcyBhY3RzIGFzIGFuIGludGVyZmFjZSBiZXR3ZWVuIHRoZSBnYW1lIGNvbnRyb2xsZXIgYW5kIHRoZSB1bmRlcmx5aW5nIGdhbWVib2FyZCxcclxuICogYWJzdHJhY3RpbmcgZ2FtZWJvYXJkIG9wZXJhdGlvbnMgYmVoaW5kIHBsYXllciBhY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyIHtcclxuICBjb25zdHJ1Y3RvcihnYW1lYm9hcmQpIHtcclxuICAgIHRoaXMuZ2FtZWJvYXJkID0gZ2FtZWJvYXJkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXR0YWNrIG1ldGhvZC5cclxuICAgKlxyXG4gICAqIEV4ZWN1dGVzIGFuIGF0dGFjayBvbiB0aGUgb3Bwb25lbnQncyBnYW1lYm9hcmQgYXQgdGhlIGdpdmVuIGNvb3JkaW5hdGVzLlxyXG4gICAqIFRoaXMgaXMgYSB3cmFwcGVyIHRoYXQgZGVsZWdhdGVzIHRoZSBhdHRhY2sgdG8gdGhlIG9wcG9uZW50J3MgZ2FtZWJvYXJkLFxyXG4gICAqIGFsbG93aW5nIHRoZSBjb250cm9sbGVyIHRvIGludGVyYWN0IHRocm91Z2ggdGhlIFBsYXllciBpbnRlcmZhY2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1BsYXllcn0gb3Bwb25lbnQgLSBUaGUgb3Bwb3NpbmcgcGxheWVyIGJlaW5nIGF0dGFja2VkXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvdyAtIFRoZSByb3cgY29vcmRpbmF0ZSBvZiB0aGUgYXR0YWNrXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbiAtIFRoZSBjb2x1bW4gY29vcmRpbmF0ZSBvZiB0aGUgYXR0YWNrXHJcbiAgICogQHJldHVybnMgeyp9IFJlc3VsdCBmcm9tIHRoZSBvcHBvbmVudCdzIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrIG1ldGhvZFxyXG4gICAqL1xyXG4gIGF0dGFjayhvcHBvbmVudCwgcm93LCBjb2x1bW4pIHtcclxuICAgIHJldHVybiBvcHBvbmVudC5nYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhyb3csIGNvbHVtbik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQbGFjZVNoaXAgbWV0aG9kLlxyXG4gICAqXHJcbiAgICogUGxhY2VzIGEgc2hpcCBvbiB0aGUgcGxheWVyJ3MgZ2FtZWJvYXJkLlxyXG4gICAqIFRoaXMgaXMgYSB3cmFwcGVyIG1ldGhvZCB0byBkZWxlZ2F0ZSBzaGlwIHBsYWNlbWVudCB0byB0aGUgdW5kZXJseWluZyBnYW1lYm9hcmQuXHJcbiAgICogVXNlZCBkdXJpbmcgZ2FtZSBzZXR1cCB0byBlbmNhcHN1bGF0ZSBnYW1lYm9hcmQgYWNjZXNzIHdpdGhpbiB0aGUgUGxheWVyIGludGVyZmFjZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb3cgLSBTdGFydGluZyByb3cgZm9yIHRoZSBzaGlwXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbiAtIFN0YXJ0aW5nIGNvbHVtbiBmb3IgdGhlIHNoaXBcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hpcE5hbWUgLSBJZGVudGlmaWVyIGZvciB0aGUgc2hpcCB0eXBlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpcmVjdGlvbiAtICdob3Jpem9udGFsJyBvciAndmVydGljYWwnXHJcbiAgICogQHJldHVybnMgeyp9IFJlc3VsdCBmcm9tIHRoZSBnYW1lYm9hcmQncyBwbGFjZVNoaXAgbWV0aG9kXHJcbiAgICovXHJcbiAgcGxhY2VTaGlwKHJvdywgY29sdW1uLCBzaGlwTmFtZSwgZGlyZWN0aW9uKSB7XHJcbiAgICByZXR1cm4gdGhpcy5nYW1lYm9hcmQucGxhY2VTaGlwKHJvdywgY29sdW1uLCBzaGlwTmFtZSwgZGlyZWN0aW9uKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vU2hpcFwiO1xyXG5cclxuLyoqXHJcbiAqIENvbXB1dGVyIEFJIENvbnRyb2xsZXIgZm9yIEJhdHRsZXNoaXAuXHJcbiAqXHJcbiAqIFRoaXMgY2xhc3Mgc2VydmVzIGFzIGFuIGF1dG9ub21vdXMgd3JhcHBlciBmb3IgdGhlIGNvbXB1dGVyIHBsYXllcixcclxuICogbWFuYWdpbmcgaXRzIHNoaXAgcGxhY2VtZW50IGFuZCBhdHRhY2sgYmVoYXZpb3IuXHJcbiAqXHJcbiAqIFJlc3BvbnNpYmlsaXRpZXMgaW5jbHVkZTpcclxuICogLSBQbGFjaW5nIHRoZSBlbnRpcmUgZmxlZXQgb24gdGhlIGJvYXJkIHVzaW5nIHJldHJ5IGxvZ2ljIHRvIGVuc3VyZSB2YWxpZCBwbGFjZW1lbnQuXHJcbiAqIC0gRXhlY3V0aW5nIHJhbmRvbSBhdHRhY2tzIG9uIHRoZSBvcHBvbmVudCB3aGlsZSBhdm9pZGluZyBkdXBsaWNhdGUgYXR0YWNrcyBieVxyXG4gKiAgIHRyYWNraW5nIHByZXZpb3VzIG1vdmVzLlxyXG4gKlxyXG4gKiBDb25zdGFudHM6XHJcbiAqIC0gTUFYX0ZMRUVUX1BMQUNFTUVOVF9BVFRFTVBUUzogTWF4aW11bSByZXRyaWVzIHRvIHBsYWNlIHRoZSBlbnRpcmUgZmxlZXQuXHJcbiAqIC0gTUFYX1NISVBfUExBQ0VNRU5UX0FUVEVNUFRTOiBNYXhpbXVtIHJldHJpZXMgdG8gcGxhY2UgYSBzaW5nbGUgc2hpcC5cclxuICpcclxuICogVXNhZ2U6XHJcbiAqIEluc3RhbnRpYXRlIHdpdGggYSBjb21wdXRlciBwbGF5ZXIgb2JqZWN0LCB0aGVuIGNhbGwgbWV0aG9kcyB0byBwbGFjZSBzaGlwcyBhbmQgcGVyZm9ybSBhdHRhY2tzLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcHV0ZXIge1xyXG4gIHN0YXRpYyBNQVhfRkxFRVRfUExBQ0VNRU5UX0FUVEVNUFRTID0gNTtcclxuICBzdGF0aWMgTUFYX1NISVBfUExBQ0VNRU5UX0FUVEVNUFRTID0gMTAwO1xyXG4gIHN0YXRpYyBQTEFDRU1FTlRfTUVUSE9EUyA9IFtcInJhbmRvbWx5XCJdO1xyXG5cclxuICAjcHJldmlvdXNBdHRhY2tzO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb21wdXRlclBsYXllcikge1xyXG4gICAgdGhpcy5wbGF5ZXIgPSBjb21wdXRlclBsYXllcjtcclxuICAgIHRoaXMuZ2FtZWJvYXJkID0gdGhpcy5wbGF5ZXIuZ2FtZWJvYXJkO1xyXG5cclxuICAgIHRoaXMuI3ByZXZpb3VzQXR0YWNrcyA9IG5ldyBTZXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4ZWN1dGVzIGEgcmFuZG9tIGF0dGFjayBvbiB0aGUgb3Bwb25lbnQuXHJcbiAgICpcclxuICAgKiBHZW5lcmF0ZXMgYSByYW5kb20gcm93IGFuZCBjb2x1bW4gKDDigJM5KSBhbmQgY2FsbHMgdGhlIHBsYXllcidzIGF0dGFja1xyXG4gICAqIG1ldGhvZCB1c2luZyB0aG9zZSBjb29yZGluYXRlcyBhZ2FpbnN0IHRoZSBwcm92aWRlZCBvcHBvbmVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHBvbmVudCAtIFRoZSB0YXJnZXQgb2YgdGhlIGF0dGFjay5cclxuICAgKiBAcmV0dXJucyB7eyByb3c6IG51bWJlciwgY29sOiBudW1iZXIsIHBsYXllckhpdDogKiB9fSAtIFRoZSBhdHRhY2sgY29vcmRpbmF0ZXMgYW5kIHRoZSByZXN1bHQgb2YgcGxheWVyLmF0dGFjaygpLlxyXG4gICAqL1xyXG4gIHJhbmRvbUF0dGFjayhvcHBvbmVudCkge1xyXG4gICAgbGV0IHJvdywgY29sLCBrZXk7XHJcblxyXG4gICAgZG8ge1xyXG4gICAgICByb3cgPSB0aGlzLmdldFJhbmRvbUludCgwLCA5KTtcclxuICAgICAgY29sID0gdGhpcy5nZXRSYW5kb21JbnQoMCwgOSk7XHJcbiAgICAgIGtleSA9IGAke3Jvd30sJHtjb2x9YDtcclxuICAgIH0gd2hpbGUgKHRoaXMuI3ByZXZpb3VzQXR0YWNrcy5oYXMoa2V5KSk7XHJcblxyXG4gICAgdGhpcy4jcHJldmlvdXNBdHRhY2tzLmFkZChrZXkpO1xyXG5cclxuICAgIGNvbnN0IHBsYXllckhpdCA9IHRoaXMucGxheWVyLmF0dGFjayhvcHBvbmVudCwgcm93LCBjb2wpO1xyXG4gICAgcmV0dXJuIHsgcm93LCBjb2wsIHBsYXllckhpdCB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcGxhY2VTaGlwc1JhbmRvbWx5IG1ldGhvZC5cclxuICAgKlxyXG4gICAqIEhhbmRsZXMgdGhlIHNoaXAgcGxhY2VtZW50IG9mIHRoZSBlbnRpcmUgZmxlZXQgYnkgY2FsbGluZyB0cnlQbGFjZVNoaXBcclxuICAgKiB3aXRoIHJhbmRvbSBhcmd1bWVudHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtib29sfSAtIFRydWUgb24gc3VjY2VzcywgZWxzZSBmYWxzZS5cclxuICAgKi9cclxuICBwbGFjZVNoaXBzUmFuZG9tbHkoKSB7XHJcbiAgICBjb25zdCBnYW1lYm9hcmQgPSB0aGlzLmdhbWVib2FyZDtcclxuICAgIGxldCBmbGVldFBsYWNlZCA9IGZhbHNlO1xyXG4gICAgbGV0IGF0dGVtcHRzID0gMDtcclxuXHJcbiAgICB3aGlsZSAoIWZsZWV0UGxhY2VkICYmIGF0dGVtcHRzIDwgQ29tcHV0ZXIuTUFYX0ZMRUVUX1BMQUNFTUVOVF9BVFRFTVBUUykge1xyXG4gICAgICBnYW1lYm9hcmQucmVzZXRCb2FyZCgpO1xyXG4gICAgICBsZXQgc2hpcHNQbGFjZWQgPSAwO1xyXG5cclxuICAgICAgU2hpcC5WQUxJRF9OQU1FUy5mb3JFYWNoKChzaGlwTmFtZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzU3VjY2Vzc2Z1bCA9IHRoaXMudHJ5UGxhY2VTaGlwKHNoaXBOYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKGlzU3VjY2Vzc2Z1bCkge1xyXG4gICAgICAgICAgc2hpcHNQbGFjZWQrKztcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKHNoaXBzUGxhY2VkID09IFNoaXAuVkFMSURfTkFNRVMubGVuZ3RoKSB7XHJcbiAgICAgICAgZmxlZXRQbGFjZWQgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGF0dGVtcHRzKys7IC8vIEluY3JlbWVudCBwZXIgZmFpbGVkIGZsZWV0IHBsYWNlbWVudFxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZsZWV0UGxhY2VkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogdHJ5UGxhY2VTaGlwIG1ldGhvZC5cclxuICAgKlxyXG4gICAqIENhbGxlZCBkdXJpbmcgcGxhY2VTaGlwc1JhbmRvbW1seSBmb3Igc2hpcCBwbGFjZW1lbnQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hpcE5hbWVcclxuICAgKiBAcmV0dXJuIHtib29sfSBUcnVlIG9uIHN1Y2Nlc3MsIGVsc2UgZmFsc2UuXHJcbiAgICovXHJcbiAgdHJ5UGxhY2VTaGlwKHNoaXBOYW1lKSB7XHJcbiAgICBsZXQgcGxhY2VkID0gZmFsc2U7XHJcbiAgICBsZXQgYXR0ZW1wdHMgPSAwO1xyXG5cclxuICAgIHdoaWxlICghcGxhY2VkICYmIGF0dGVtcHRzIDwgQ29tcHV0ZXIuTUFYX1NISVBfUExBQ0VNRU5UX0FUVEVNUFRTKSB7XHJcbiAgICAgIGxldCByWCA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIDkpO1xyXG4gICAgICBsZXQgclkgPSB0aGlzLmdldFJhbmRvbUludCgwLCA5KTtcclxuICAgICAgbGV0IGRpcmVjdGlvbiA9IE1hdGgucmFuZG9tKCkgPCAwLjUgPyBcImhvcml6b250YWxcIiA6IFwidmVydGljYWxcIjtcclxuXHJcbiAgICAgIGNvbnN0IGlzU3VjY2Vzc2Z1bCA9IHRoaXMucGxheWVyLnBsYWNlU2hpcChyWCwgclksIHNoaXBOYW1lLCBkaXJlY3Rpb24pO1xyXG5cclxuICAgICAgaWYgKGlzU3VjY2Vzc2Z1bCkge1xyXG4gICAgICAgIHBsYWNlZCA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXR0ZW1wdHMrKztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwbGFjZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBnZXRSYW5kb21JbnQgbWV0aG9kLlxyXG4gICAqXHJcbiAgICogUmV0dXJucyBhIG51bWJlciBiZXR3ZWVuIGEgbWluIGFuZCBhIG1heC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSAtIE1pbmludW0gbGltaXRcclxuICAgKiBAcGFyYW0ge251bWJlcn0gLSBNYXhpbXVtIGxpbWl0XHJcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJhbmRvbSBudW1iZXIuXHJcbiAgICovXHJcbiAgZ2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcclxuICB9XHJcbn1cclxuIiwiLy8gUmUtZXhwb3J0IGFsbCBjbGFzc2VzIGZyb20gdGhpcyBmb2xkZXIgZm9yIGNsZWFuZXIgaW1wb3J0c1xyXG5cclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBVSSB9IGZyb20gXCIuL1VJXCI7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR2FtZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9HYW1lQ29udHJvbGxlclwiO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIFBsYXllciB9IGZyb20gXCIuL1BsYXllclwiO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIENvbXB1dGVyIH0gZnJvbSBcIi4vQ29tcHV0ZXJcIjtcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBHYW1lYm9hcmQgfSBmcm9tIFwiLi9HYW1lYm9hcmRcIjtcclxuIiwiaW1wb3J0IHsgVUksIEdhbWVDb250cm9sbGVyLCBQbGF5ZXIsIENvbXB1dGVyLCBHYW1lYm9hcmQgfSBmcm9tIFwiLi9jbGFzc2VzXCI7XHJcblxyXG4vKipcclxuICogTWFpbiBhcHAgc2V0dXAgZnVuY3Rpb24uXHJcbiAqIEluaXRpYWxpemVzIHBsYXllcnMsIGdhbWUgY29udHJvbGxlciwgYW5kIFVJLlxyXG4gKiBSZXNwb25zaWJsZSBmb3IgYm9vdHN0cmFwcGluZyBnYW1lIHN0YXRlIGFuZCByZW5kZXJpbmcgdGhlIGdyaWRzLlxyXG4gKi9cclxuZnVuY3Rpb24gQXBwKCkge1xyXG4gIGNvbnN0IHsgcGxheWVyQm9hcmQsIGNvbXB1dGVyQm9hcmQgfSA9IHNldHVwQm9hcmRzKCk7XHJcbiAgY29uc3QgeyBwbGF5ZXIsIGNvbXB1dGVyIH0gPSBzZXR1cFBsYXllcnMocGxheWVyQm9hcmQsIGNvbXB1dGVyQm9hcmQpO1xyXG4gIGNvbnN0IGdhbWVDb250cm9sbGVyID0gc2V0dXBHYW1lQ29udHJvbGxlcihwbGF5ZXIsIGNvbXB1dGVyKTtcclxuICBjb25zdCB1aSA9IHNldHVwVUkoKTtcclxuXHJcbiAgdWkuY3JlYXRlU2hpcFBvcHVwKFxyXG4gICAgcGxheWVyLnBsYWNlU2hpcC5iaW5kKHBsYXllciksXHJcbiAgICBwbGF5ZXJCb2FyZC52ZXJpZnlTaGlwUGxhY2VtZW50LmJpbmQocGxheWVyQm9hcmQpXHJcbiAgKTtcclxuICByZW5kZXJHcmlkcyh1aSk7XHJcblxyXG4gIGdhbWVDb250cm9sbGVyLnBsYXlHYW1lKFxyXG4gICAgdWkuZ2V0UGxheWVyU2hpcFBvc2l0aW9ucy5iaW5kKHVpKSxcclxuICAgIHVpLmdldFBsYXllckF0dGFja1Bvc2l0aW9uLmJpbmQodWkpLFxyXG4gICAgdWkuZGlzcGxheVdpbm5lci5iaW5kKHVpKSxcclxuICAgIHVpLm1hcmtDZWxsQmFzZWRPbkhpdC5iaW5kKHVpKSxcclxuICAgIEFwcFxyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBnYW1lYm9hcmQgaW5zdGFuY2VzIGZvciB0aGUgcGxheWVyIGFuZCBjb21wdXRlci5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHBsYXllcidzIGFuZCBjb21wdXRlcidzIGdhbWVib2FyZHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXR1cEJvYXJkcygpIHtcclxuICBjb25zdCBwbGF5ZXJCb2FyZCA9IG5ldyBHYW1lYm9hcmQoKTtcclxuICBjb25zdCBjb21wdXRlckJvYXJkID0gbmV3IEdhbWVib2FyZCgpO1xyXG5cclxuICByZXR1cm4geyBwbGF5ZXJCb2FyZCwgY29tcHV0ZXJCb2FyZCB9O1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZXMgcGxheWVyLXJlbGF0ZWQgb2JqZWN0cyB3aXRoIHRoZWlyIGdhbWVib2FyZHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7R2FtZWJvYXJkfSBwbGF5ZXJCb2FyZCAtIEdhbWVib2FyZCBpbnN0YW5jZSBmb3IgdGhlIGh1bWFuIHBsYXllclxyXG4gKiBAcGFyYW0ge0dhbWVib2FyZH0gY29tcHV0ZXJCb2FyZCAtIEdhbWVib2FyZCBpbnN0YW5jZSBmb3IgdGhlIGNvbXB1dGVyIHBsYXllclxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgcGxheWVyIGFuZCBjb21wdXRlciBpbnN0YW5jZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXR1cFBsYXllcnMocGxheWVyQm9hcmQsIGNvbXB1dGVyQm9hcmQpIHtcclxuICBjb25zdCBwbGF5ZXIgPSBuZXcgUGxheWVyKHBsYXllckJvYXJkKTtcclxuICBjb25zdCBjb21wdXRlclBsYXllciA9IG5ldyBQbGF5ZXIoY29tcHV0ZXJCb2FyZCk7XHJcbiAgY29uc3QgY29tcHV0ZXIgPSBuZXcgQ29tcHV0ZXIoY29tcHV0ZXJQbGF5ZXIpO1xyXG5cclxuICByZXR1cm4geyBwbGF5ZXIsIGNvbXB1dGVyIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyB0aGUgR2FtZUNvbnRyb2xsZXIgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtHYW1lQ29udHJvbGxlcn0gQSBuZXcgR2FtZUNvbnRyb2xsZXIgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0dXBHYW1lQ29udHJvbGxlcihwbGF5ZXIsIGNvbXB1dGVyKSB7XHJcbiAgY29uc3QgZ2FtZUNvbnRyb2xsZXIgPSBuZXcgR2FtZUNvbnRyb2xsZXIocGxheWVyLCBjb21wdXRlcik7XHJcblxyXG4gIHJldHVybiBnYW1lQ29udHJvbGxlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIHRoZSBVSSBpbnN0YW5jZS5cclxuICpcclxuICogQHJldHVybnMge1VJfSBBIG5ldyBVSSBvYmplY3QgcmVzcG9uc2libGUgZm9yIG1hbmFnaW5nIHRoZSB1c2VyIGludGVyZmFjZS5cclxuICovXHJcbmZ1bmN0aW9uIHNldHVwVUkoKSB7XHJcbiAgY29uc3QgdWkgPSBuZXcgVUkoKTtcclxuXHJcbiAgcmV0dXJuIHVpO1xyXG59XHJcblxyXG4vKipcclxuICogUmVuZGVycyB0aGUgcGxheWVyIGFuZCBjb21wdXRlciBncmlkcyBpbiB0aGUgRE9NIHVzaW5nIHRoZSBwcm92aWRlZCBVSSBpbnN0YW5jZS5cclxuICpcclxuICogVXNlcyB0aGUgZGVmYXVsdCAxMHgxMCBCYXR0bGVzaGlwIGJvYXJkIGRpbWVuc2lvbnMgZGVmaW5lZCBieSB0aGUgR2FtZWJvYXJkIGNsYXNzLlxyXG4gKiBFYWNoIGdyaWQgaXMgcG9wdWxhdGVkIHdpdGggY2VsbHMgY3JlYXRlZCBieSB0aGUgVUkncyBjcmVhdGVDZWxsIG1ldGhvZC5cclxuICpcclxuICogQHBhcmFtIHtVSX0gdWlJbnN0YW5jZSAtIFRoZSBVSSBvYmplY3QgcmVzcG9uc2libGUgZm9yIERPTSBtYW5pcHVsYXRpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiByZW5kZXJHcmlkcyh1aUluc3RhbmNlKSB7XHJcbiAgY29uc3QgZGVmYXVsdEdyaWRTZXR1cCA9IHtcclxuICAgIHJvdzogR2FtZWJvYXJkLkJPQVJEX1JPV1MsXHJcbiAgICBjb2w6IEdhbWVib2FyZC5CT0FSRF9DT0xTLFxyXG4gICAgY3JlYXRlQ2VsbDogdWlJbnN0YW5jZS5jcmVhdGVDZWxsLFxyXG4gIH07XHJcblxyXG4gIHVpSW5zdGFuY2UucG9wdWxhdGVHcmlkKHVpSW5zdGFuY2UucGxheWVyR3JpZCwgZGVmYXVsdEdyaWRTZXR1cCk7XHJcbiAgdWlJbnN0YW5jZS5wb3B1bGF0ZUdyaWQodWlJbnN0YW5jZS5jb21wdXRlckdyaWQsIGRlZmF1bHRHcmlkU2V0dXApO1xyXG4gIHVpSW5zdGFuY2UuYWRkR3JpZENsaWNrTGlzdGVuZXJzKHVpSW5zdGFuY2UuY29tcHV0ZXJHcmlkKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXBwO1xyXG4iLCJpbXBvcnQgXCIuL3N0eWxlcy5jc3NcIjtcclxuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHBcIjtcclxuXHJcbkFwcCgpO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///897\n\n}')}},__webpack_module_cache__={};function __webpack_require__(c){var n=__webpack_module_cache__[c];if(void 0!==n)return n.exports;var l=__webpack_module_cache__[c]={id:c,exports:{}};return __webpack_modules__[c](l,l.exports,__webpack_require__),l.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=c=>{var n=c&&c.__esModule?()=>c.default:()=>c;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(c,n)=>{for(var l in n)__webpack_require__.o(n,l)&&!__webpack_require__.o(c,l)&&Object.defineProperty(c,l,{enumerable:!0,get:n[l]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(c){if("object"==typeof window)return window}}(),__webpack_require__.o=(c,n)=>Object.prototype.hasOwnProperty.call(c,n),(()=>{var c;__webpack_require__.g.importScripts&&(c=__webpack_require__.g.location+"");var n=__webpack_require__.g.document;if(!c&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(c=n.currentScript.src),!c)){var l=n.getElementsByTagName("script");if(l.length)for(var B=l.length-1;B>-1&&(!c||!/^http(s?):/.test(c));)c=l[B--].src}if(!c)throw new Error("Automatic publicPath is not supported in this browser");c=c.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=c})(),__webpack_require__.b=document.baseURI||self.location.href,__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(897)})();